%{
#import "Tranquil.h"

struct _TQParserState {
    struct {
        int begin;
        int length;
    } currentToken;
    int currentLine;

    NSMutableArray *stack;
    TQProgram *program;
};
typedef struct _TQParserState TQParserState;

#define YY_XTYPE TQParserState *
#define YY_XVAR  state
#define YYSTYPE id
#define YYNSSTR [NSString stringWithUTF8String:yytext]
#define YYNNUM atof(yytext)
#define YYNSNUM [NSNumber numberWithDouble:YYNNUM]

#define StackTop [state->stack lastObject]
#define PushStack(obj) [state->stack addObject:(obj)]
#define PopStack() StackTop; [state->stack removeLastObject]
#define ReplaceStackTop(val) do { id repl = val; PopStack(); PushStack(repl); } while(0)

#define UpdatePos() do { \
    ((CLParserState *)(G->data))->currentToken.begin  = thunk->begin + G->offset;  \
    ((CLParserState *)(G->data))->currentToken.length = thunk->end - thunk->begin; \
} while(0)

//#define YY_DEBUG
%}

Program      = (Statement --)+ EOF
               {
                   NSMutableArray *statements = PopStack();
                   TQNodeBlock *root = [TQNodeRootBlock node];
                   [root setStatements:statements];
                   [state->program setRoot:root];
               }
             | - ( !EOL . )* EOL


# Statement
Statement    = (
               If
             | Call
             | Message
             | Class
             | Assignment
             | Return
             ) { [StackTop addObject:$$]; }


Return       = "^" retVal:Expression { $$ = [TQNodeReturn nodeWithValue:retVal]; }


# Expression
Expression   = Equation
             | NoEqExpr

NoEqExpr     = Call
             | Message
             | Block
             | Self
             | Nil
             | SubscriptExp
             | Property
             | Array
             | Dictionary
#             | RegExp
             | Literal
             | Variable
             | ParenExpr

ParenExpr    = '(' expr:Expression ')' { $$ = expr; }


# Message
Message      = rcvr:MessageRecvr -
               {
                    PushStack([TQNodeMessage nodeWithReceiver:rcvr]);
                    PushStack([NSMutableArray array]);
               }
               (SelectorPart --)+
               {
                   NSMutableArray *arguments = PopStack();
                   $$ = PopStack();
                   [$$ setArguments:arguments];
               }
               '.'?
             | rcvr:MessageRecvr - name:Identifier - '.'?
               {
                    $$ = [TQNodeMessage nodeWithReceiver:rcvr];
                    NSError *err = nil;
                    [(NSMutableArray*)[$$ arguments] addObject:[TQNodeArgument nodeWithPassedNode:nil
                                                                                     selectorPart:name]];
               }
MessageRecvr = SubscriptExp
             | Property
             | Constant
             | Call
             | Super
             | Literal
             | Variable
             | ParenExpr
SelectorPart = name:Identifier? - ':' -- param:Expression
               {
                    [StackTop addObject:[TQNodeArgument nodeWithPassedNode:param selectorPart:name]];
               }

# Call
## callee(expr, expr)
Call         = callee:Callee
               {
                    PushStack([TQNodeCall nodeWithCallee:callee]);
                    PushStack([NSMutableArray array]);
               }
               '(' -- (CallArg (-- ',' -- CallArg)*)? -- ')'
               {
                    NSMutableArray *arguments = PopStack();
                    $$ = PopStack();
                    [$$ setArguments:arguments];
               }
Callee       = Block
             | SubscriptExp
             | Property
             | Variable
CallArg      = arg:Expression { [StackTop addObject:arg]; }


# Block
Block        = '{' --
               {
                 PushStack([TQNodeBlock node]);
                 PushStack([NSMutableArray array]);
               }
               ( (BlockArgDef - (',' -- BlockArgDef --)*)? '|' --)?
               {
                   NSMutableArray *arguments = PopStack();
                   [StackTop setArguments:arguments];
                   PushStack([NSMutableArray array]);
               }
               (Statement --)*
               {
                   NSMutableArray *statements = PopStack();
                   $$ = PopStack();
                   [$$ setStatements:statements];
               }
               '}'
             | '`' -
               {
                   PushStack([NSMutableArray array]);
               }
               ( (BlockArgDef - (',' - BlockArgDef --)*)? '|' -)? expr:Expression - '`'
               {
                   NSMutableArray *arguments = PopStack();
                   $$ = [TQNodeBlock node];
                   [$$ setArguments:arguments];
                   [$$ setStatements:[NSMutableArray arrayWithObject:[TQNodeReturn nodeWithValue:expr]]];
               }
BlockArgDef  = name:Identifier { [StackTop addObject:name]; }


# Class
Class        = '#' name:Constant --
               {
                   PushStack([TQNodeClass nodeWithName:name]);
               }
               ( "<" -- SuperClsName -- )? '{' -- (Method --)* '}'
               {
                  $$ = PopStack();
               }
SuperClsName = superName:Constant
               {
                   [StackTop setSuperClassName:superName];
               }
Method       = '+' -- method:MethodImpl
               {
                   [(TQNodeMethod *)method setType:kTQClassMethod];
                   [[StackTop classMethods] addObject:method];
               }
             | '-' -- method:MethodImpl
               {
                   [(TQNodeMethod *)method setType:kTQInstanceMethod];
                   [[StackTop instanceMethods] addObject:method];
               }
MethodImpl   = arguments:MethodArgs  --
               {
                   PushStack([NSMutableArray array]);
               }
               ( '{' -- (Statement --)* '}'
               {
                   NSMutableArray *statements = PopStack();
                   $$ = [TQNodeMethod node];
                   [$$ setStatements:statements];
               }
               | '`' - expr:Expression - '`'
               {
                   PopStack(); // Ignore
                   $$ = [TQNodeMethod node];
                   [$$ setStatements:[NSMutableArray arrayWithObject:[TQNodeReturn nodeWithValue:expr]]];
               }
               )
               {
                   NSError *err = nil;
                   for(TQNodeArgumentDef *arg in arguments) {
                       [(TQNodeMethod*)$$ addArgument:arg error:&err];
                       if(err)
                           assert(false);
                   }
               }
MethodArgs   = selIdentifier:SelIdent
               {
                   PushStack([NSMutableArray array]);
                   [StackTop addObject:[TQNodeArgumentDef nodeWithName:nil selectorPart:selIdentifier]];
               }
               (':' -- name:Identifier -- MethodArg*)?
               {
                   $$ = PopStack();
                   [[$$ objectAtIndex:0] setName:name];
               }
MethodArg    = identifier:Identifier':' -- name:Identifier
               {
                   [StackTop addObject:[TQNodeArgumentDef nodeWithName:name selectorPart:identifier]];
               }


# Conditionals
If           = "if" -- cond:Expression -- '{' --
                {
                    PushStack([TQNodeIfBlock node]);
                    [StackTop setCondition:cond];
                    PushStack([NSMutableArray array]);
                }
                ( Statement --)* '}'
                  {
                      //NSMutableArray *statements = PopStack();
                  }
                ( -- "else" - If)*
                  {
                  }
                ( "else" "{" --
                  (Statement --)* "}"
                  {
                  }
                )?
                {
                    NSMutableArray *statements = PopStack();
                    $$ = PopStack();
                    [$$ setStatements:statements];
                }



# Equations
Sum          = a:Product             { PushStack(a);                                                                             }
               ( - "+" - b:Product   { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorAdd      left:StackTop right:b]); }
               | - "-" - b:Product   { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorSubtract left:StackTop right:b]); }
               )*                    { $$ = PopStack();                                                                          }

Product      = a:NoEqExpr            { PushStack(a);                                                                             }
               ( - "*" - b:Product   { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorMultiply left:StackTop right:b]); }
               | - "/" - b:Product   { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorDivide   left:StackTop right:b]); }
               )*                    { $$ = PopStack();                                                                          }

Equation     = a:Sum                 { PushStack(a);                                                                                   }
               ( - "<" -  b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorLesser         left:StackTop right:b]); }
               | - ">" -  b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorGreater        left:StackTop right:b]); }
               | - "<=" - b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorLesserOrEqual  left:StackTop right:b]); }
               | - "=>" - b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorGreaterOrEqual left:StackTop right:b]); }
               | - "==" - b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorEqual          left:StackTop right:b]); }
               | - "!=" - b:Equation { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorInequal        left:StackTop right:b]); }
               )*                    { $$ = PopStack();                                                                                }

Assignment     = a:AssgnLhs - "=" -- { PushStack(a);    }
                 (AssgnRhs -)+       { $$ = PopStack(); }
AssgnLhs       = Property
               | SubscriptExp
               | Variable
AssgnRhs       = b:Expression        { ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorAssign left:StackTop right:b]); }
                 | "=" -- b:Expression
                 {
                     // (a=b) = c doesn't make sense so we must transform it to a = (b=c)
                     TQNodeOperator *oldOp = StackTop;
                     assert([oldOp isKindOfClass:[TQNodeOperator class]] && oldOp.type == kTQOperatorAssign);
                     TQNodeOperator *newOp = [TQNodeOperator nodeWithType:kTQOperatorAssign left:oldOp.right right:b];
                     ReplaceStackTop([TQNodeOperator nodeWithType:kTQOperatorAssign left:oldOp.left right:newOp]);
                 }


# Accessors

SubscriptExp = obj:Variable
               {
                   PushStack([NSMutableArray array]);
               }
               - (Subscript -)+
               {
                   NSMutableArray *subscripts = PopStack();
                   $$ = [TQNodeOperator nodeWithType:kTQOperatorGetter left:obj right:[subscripts objectAtIndex:0]];
                   for(int i = 1; i < [subscripts count]; ++i) {
                      $$ = [TQNodeOperator nodeWithType:kTQOperatorGetter left:$$ right:[subscripts objectAtIndex:i]];
                   }

               }
Subscript    = "[" -- subscript:Variable -- "]" { [StackTop addObject:subscript]; }

Property     = obj:Variable
               {
                   PushStack([NSMutableArray array]);
               }
               - (PropSubscr -)+
               {
                   NSMutableArray *subscripts = PopStack();
                   $$ = [TQNodeMemberAccess nodeWithReceiver:obj property:[subscripts objectAtIndex:0]];
                   for(int i = 1; i < [subscripts count]; ++i) {
                      $$ = [TQNodeMemberAccess nodeWithReceiver:$$ property:[subscripts objectAtIndex:i]];
                   }
               }
PropSubscr   = "#" - prop:Identifier { [StackTop addObject:prop]; }


# Built-in constructors
Array        = "#["
               {
                   PushStack([NSMutableArray array]);
               }
               (ArrItem -- ("," -- ArrItem)*)?  -- "]"
               {
                   $$ = [TQNodeArray node];
                   NSMutableArray *items = PopStack();
                   [$$ setItems:items];
               }
ArrItem      = item:Variable
             {
                 [StackTop addObject:item];
             }

Dictionary   = "#{" --
               {
                   PushStack([NSMapTable mapTableWithStrongToStrongObjects]);
               }
               (DictItem -- ("," -- DictItem)*)? -- "}"
               {
                   $$ = [TQNodeDictionary node];
                   NSMutableArray *items = PopStack();
                   [$$ setItems:items];

               }
DictItem     = key:Variable -- "=>" -- value:Variable
               {
                   [StackTop setObject:value forKey:key];
               }

#RegExp TODO


# Basic components
Variable     = name:Identifier
               {
                   $$ = [TQNodeVariable nodeWithName:name];
               }

Literal      = Number
             | String

BreakStmt    = 'break'
SkipStmt     = 'skip'
Nil          = 'nil'   { $$ = [TQNodeNil node];   }
Self         = 'self'  { $$ = [TQNodeSelf node];  }
Super        = 'super' { $$ = [TQNodeSuper node]; }

Operator     = '==' { $$ = @"=="; }
             | '!=' { $$ = @"!="; }
             | '='  { $$ = @"=";  }
             | '>=' { $$ = @">="; }
             | '<=' { $$ = @"<="; }
             | '<'  { $$ = @"<";  }
             | '>'  { $$ = @">";  }
             | '*'  { $$ = @"*";  }
             | '/'  { $$ = @"/";  }
             | '+'  { $$ = @"+";  }
             | '-'  { $$ = @"-";  }
SelIdent     = Identifier | Operator

Number       = (< '-'? [0-9]+ ('.' [0-9]*)? ('e'[0-9]+)? >
             | < '-'? '.' [0-9]+ ('e'[0-9]+)? > )          { $$ = [TQNodeNumber nodeWithDouble:YYNNUM];      }
Identifier   = < [a-z_][A-Za-z0-9_]* >                     { $$ = YYNSSTR;                                   }
Constant     = < [A-Z][A-Za-z0-9_]* >                      { $$ = [TQNodeConstant   nodeWithString:YYNSSTR]; }
String       = '"' < [^\"]* > '"'                          { $$ = [TQNodeString     nodeWithString:YYNSSTR]; }

Comment      = "\\" !"\\" (!EOL .)* EOL { NSLog(@"Comment"); }
-            = [ \t]*
--           = (Comment | EOL)? -
EOL          = (- ('\n' | '\r\n' | '\r'))+
EOF          = - !.
%%

int main()
{
    GREG greg;
    yyinit(&greg);

    TQParserState parserState = {0};
    parserState.currentToken.begin = 0;
    parserState.currentToken.length = 0;
    parserState.currentLine = 1;
    parserState.stack = [NSMutableArray array];
    parserState.program = [TQProgram programWithName:@"Test"];
    greg.data = &parserState;

    [parserState.stack addObject:[NSMutableArray array]];

    while(yyparse(&greg));
    yydeinit(&greg);

    NSLog(@"%@", parserState.program);
    [parserState.program run];

    return 0;
}


/*tREGEX      = '/' < ((\\/)|[^/])* > '/' < [im]* >*/
