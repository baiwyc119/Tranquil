<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{_CFAllocatorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}' name='CFAllocatorContext' type64='{_CFAllocatorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='CFAllocatorRetainCallBack' name='retain' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFAllocatorReleaseCallBack' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFAllocatorCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFAllocatorAllocateCallBack' name='allocate' function_pointer='true'>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' declared_type='CFAllocatorReallocateCallBack' name='reallocate' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' declared_type='CFAllocatorDeallocateCallBack' name='deallocate' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFAllocatorPreferredSizeCallBack' name='preferredSize' function_pointer='true'>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</field>
</struct>
<struct type='{_CFArrayCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFArrayCallBacks' type64='{_CFArrayCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFArrayRetainCallBack' name='retain' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFArrayReleaseCallBack' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFArrayCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFArrayEqualCallBack' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFBagCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFBagCallBacks' type64='{_CFBagCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFBagRetainCallBack' name='retain' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFBagReleaseCallBack' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFBagCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFBagEqualCallBack' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' declared_type='CFBagHashCallBack' name='hash' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}' name='CFBinaryHeapCallBacks' type64='{_CFBinaryHeapCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='void *(*)(CFAllocatorRef, void *)' name='retain' function_pointer='true' const='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(CFAllocatorRef, void *)' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFComparisonResult (*)(void *, void *, void *)' name='compare' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCompareContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFBinaryHeapCompareContext' type64='{_CFBinaryHeapCompareContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFDictionaryKeyCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFDictionaryKeyCallBacks' type64='{_CFDictionaryKeyCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFDictionaryRetainCallBack' name='retain' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFDictionaryReleaseCallBack' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFDictionaryCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFDictionaryEqualCallBack' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' declared_type='CFDictionaryHashCallBack' name='hash' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</field>
</struct>
<struct type='{_CFDictionaryValueCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFDictionaryValueCallBacks' type64='{_CFDictionaryValueCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFDictionaryRetainCallBack' name='retain' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFDictionaryReleaseCallBack' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFDictionaryCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFDictionaryEqualCallBack' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFFileDescriptorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFFileDescriptorContext' type64='{_CFFileDescriptorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFGregorianDate=&quot;year&quot;i&quot;month&quot;c&quot;day&quot;c&quot;hour&quot;c&quot;minute&quot;c&quot;second&quot;d}' name='CFGregorianDate'>
<field type='l' declared_type='SInt32' name='year' type64='i'/>
<field type='c' declared_type='SInt8' name='month'/>
<field type='c' declared_type='SInt8' name='day'/>
<field type='c' declared_type='SInt8' name='hour'/>
<field type='c' declared_type='SInt8' name='minute'/>
<field type='d' declared_type='double' name='second'/>
</struct>
<struct type='{_CFGregorianUnits=&quot;years&quot;i&quot;months&quot;i&quot;days&quot;i&quot;hours&quot;i&quot;minutes&quot;i&quot;seconds&quot;d}' name='CFGregorianUnits'>
<field type='l' declared_type='SInt32' name='years' type64='i'/>
<field type='l' declared_type='SInt32' name='months' type64='i'/>
<field type='l' declared_type='SInt32' name='days' type64='i'/>
<field type='l' declared_type='SInt32' name='hours' type64='i'/>
<field type='l' declared_type='SInt32' name='minutes' type64='i'/>
<field type='d' declared_type='double' name='seconds'/>
</struct>
<struct type='{_CFMachPortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMachPortContext' type64='{_CFMachPortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFMessagePortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMessagePortContext' type64='{_CFMessagePortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' name='CFRange' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}'>
<field type='l' declared_type='CFIndex' name='location' type64='q'/>
<field type='l' declared_type='CFIndex' name='length' type64='q'/>
</struct>
<struct type='{_CFRunLoopObserverContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopObserverContext' type64='{_CFRunLoopObserverContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext' type64='{_CFRunLoopSourceContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='Boolean (*)(void *, void *)' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' declared_type='CFHashCode (*)(void *)' name='hash' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</field>
<field type='^?' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' name='schedule' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' name='cancel' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='perform' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext1=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext1' type64='{_CFRunLoopSourceContext1=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='Boolean (*)(void *, void *)' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' declared_type='CFHashCode (*)(void *)' name='hash' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</field>
<field type='^?' declared_type='mach_port_t (*)(void *)' name='getPort' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='I' declared_type='mach_port_t'/>
</field>
<field type='^?' declared_type='void *(*)(void *, CFIndex, CFAllocatorRef, void *)' name='perform' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
</struct>
<struct type='{_CFRunLoopTimerContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopTimerContext' type64='{_CFRunLoopTimerContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSetCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFSetCallBacks' type64='{_CFSetCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFSetRetainCallBack' name='retain' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFSetReleaseCallBack' name='release' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFSetCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field type='^?' declared_type='CFSetEqualCallBack' name='equal' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field type='^?' declared_type='CFSetHashCallBack' name='hash' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</field>
</struct>
<struct type='{_CFSocketContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFSocketContext' type64='{_CFSocketContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true' const='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSocketSignature=&quot;protocolFamily&quot;i&quot;socketType&quot;i&quot;protocol&quot;i&quot;address&quot;^{__CFData}}' name='CFSocketSignature'>
<field type='l' declared_type='SInt32' name='protocolFamily' type64='i'/>
<field type='l' declared_type='SInt32' name='socketType' type64='i'/>
<field type='l' declared_type='SInt32' name='protocol' type64='i'/>
<field type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
</struct>
<struct type='{_CFStreamClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFStreamClientContext' type64='{_CFStreamClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='void *(*)(void *)' name='retain' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' declared_type='void (*)(void *)' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFStreamError=&quot;domain&quot;i&quot;error&quot;i}' name='CFStreamError' type64='{_CFStreamError=&quot;domain&quot;q&quot;error&quot;i}'>
<field type='l' declared_type='CFIndex' name='domain' type64='q'/>
<field type='l' declared_type='SInt32' name='error' type64='i'/>
</struct>
<struct type='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directBuffer&quot;^S&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;i&quot;length&quot;i}&quot;bufferedRangeStart&quot;i&quot;bufferedRangeEnd&quot;i}' name='CFStringInlineBuffer' type64='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directBuffer&quot;^S&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;q&quot;length&quot;q}&quot;bufferedRangeStart&quot;q&quot;bufferedRangeEnd&quot;q}'>
<field type='[64S]' declared_type='UniChar*' name='buffer'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<field type='^S' declared_type='UniChar*' name='directBuffer' const='true'/>
<field type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' declared_type='CFRange' name='rangeToBuffer' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}'/>
<field type='l' declared_type='CFIndex' name='bufferedRangeStart' type64='q'/>
<field type='l' declared_type='CFIndex' name='bufferedRangeEnd' type64='q'/>
</struct>
<struct type='{_CFSwappedFloat32=&quot;v&quot;I}' name='CFSwappedFloat32'>
<field type='I' declared_type='uint32_t' name='v'/>
</struct>
<struct type='{_CFSwappedFloat64=&quot;v&quot;Q}' name='CFSwappedFloat64'>
<field type='Q' declared_type='uint64_t' name='v'/>
</struct>
<struct type='{_CFTreeContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFTreeContext' type64='{_CFTreeContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='CFTreeRetainCallBack' name='retain' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFTreeReleaseCallBack' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFTreeCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFUUIDBytes=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='CFUUIDBytes'>
<field type='C' declared_type='UInt8' name='byte0'/>
<field type='C' declared_type='UInt8' name='byte1'/>
<field type='C' declared_type='UInt8' name='byte2'/>
<field type='C' declared_type='UInt8' name='byte3'/>
<field type='C' declared_type='UInt8' name='byte4'/>
<field type='C' declared_type='UInt8' name='byte5'/>
<field type='C' declared_type='UInt8' name='byte6'/>
<field type='C' declared_type='UInt8' name='byte7'/>
<field type='C' declared_type='UInt8' name='byte8'/>
<field type='C' declared_type='UInt8' name='byte9'/>
<field type='C' declared_type='UInt8' name='byte10'/>
<field type='C' declared_type='UInt8' name='byte11'/>
<field type='C' declared_type='UInt8' name='byte12'/>
<field type='C' declared_type='UInt8' name='byte13'/>
<field type='C' declared_type='UInt8' name='byte14'/>
<field type='C' declared_type='UInt8' name='byte15'/>
</struct>
<struct type='{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}' name='CFXMLAttributeDeclarationInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='attributeName'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='typeString'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='defaultString'/>
</struct>
<struct type='{_CFXMLAttributeListDeclarationInfo=&quot;numberOfAttributes&quot;i&quot;attributes&quot;^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}}' name='CFXMLAttributeListDeclarationInfo' type64='{_CFXMLAttributeListDeclarationInfo=&quot;numberOfAttributes&quot;q&quot;attributes&quot;^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}}'>
<field type='l' declared_type='CFIndex' name='numberOfAttributes' type64='q'/>
<field type='^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}' declared_type='CFXMLAttributeDeclarationInfo*' name='attributes'/>
</struct>
<struct type='{_CFXMLDocumentInfo=&quot;sourceURL&quot;^{__CFURL}&quot;encoding&quot;I}' name='CFXMLDocumentInfo'>
<field type='^{__CFURL=}' declared_type='CFURLRef' name='sourceURL'/>
<field type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
</struct>
<struct type='{_CFXMLDocumentTypeInfo=&quot;externalID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}}' name='CFXMLDocumentTypeInfo'>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='externalID'/>
</struct>
<struct type='{_CFXMLElementInfo=&quot;attributes&quot;^{__CFDictionary}&quot;attributeOrder&quot;^{__CFArray}&quot;isEmpty&quot;B&quot;_reserved&quot;[3c]}' name='CFXMLElementInfo'>
<field type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='attributes'/>
<field type='^{__CFArray=}' declared_type='CFArrayRef' name='attributeOrder'/>
<field type='B' declared_type='Boolean' name='isEmpty'/>
<field type='[3c]' declared_type='char*' name='_reserved'/>
</struct>
<struct type='{_CFXMLElementTypeDeclarationInfo=&quot;contentDescription&quot;^{__CFString}}' name='CFXMLElementTypeDeclarationInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='contentDescription'/>
</struct>
<struct type='{_CFXMLEntityInfo=&quot;entityType&quot;i&quot;replacementText&quot;^{__CFString}&quot;entityID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}&quot;notationName&quot;^{__CFString}}' name='CFXMLEntityInfo' type64='{_CFXMLEntityInfo=&quot;entityType&quot;q&quot;replacementText&quot;^{__CFString}&quot;entityID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}&quot;notationName&quot;^{__CFString}}'>
<field type='l' declared_type='CFXMLEntityTypeCode' name='entityType' type64='q'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='replacementText'/>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='entityID'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='notationName'/>
</struct>
<struct type='{_CFXMLEntityReferenceInfo=&quot;entityType&quot;i}' name='CFXMLEntityReferenceInfo' type64='{_CFXMLEntityReferenceInfo=&quot;entityType&quot;q}'>
<field type='l' declared_type='CFXMLEntityTypeCode' name='entityType' type64='q'/>
</struct>
<struct type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' name='CFXMLExternalID'>
<field type='^{__CFURL=}' declared_type='CFURLRef' name='systemID'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='publicID'/>
</struct>
<struct type='{_CFXMLNotationInfo=&quot;externalID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}}' name='CFXMLNotationInfo'>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='externalID'/>
</struct>
<struct type='{_CFXMLParserCallBacks=&quot;version&quot;i&quot;createXMLStructure&quot;^?&quot;addChild&quot;^?&quot;endXMLStructure&quot;^?&quot;resolveExternalEntity&quot;^?&quot;handleError&quot;^?}' name='CFXMLParserCallBacks' type64='{_CFXMLParserCallBacks=&quot;version&quot;q&quot;createXMLStructure&quot;^?&quot;addChild&quot;^?&quot;endXMLStructure&quot;^?&quot;resolveExternalEntity&quot;^?&quot;handleError&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^?' declared_type='CFXMLParserCreateXMLStructureCallBack' name='createXMLStructure' function_pointer='true'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field type='^?' declared_type='CFXMLParserAddChildCallBack' name='addChild' function_pointer='true'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFXMLParserEndXMLStructureCallBack' name='endXMLStructure' function_pointer='true'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFXMLParserResolveExternalEntityCallBack' name='resolveExternalEntity' function_pointer='true'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^{_CFXMLExternalID=^{__CFURL}^{__CFString}}' declared_type='CFXMLExternalID*'/>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</field>
<field type='^?' declared_type='CFXMLParserHandleErrorCallBack' name='handleError' function_pointer='true'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='l' declared_type='CFXMLParserStatusCode' type64='q'/>
<arg type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFXMLParserContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFXMLParserContext' type64='{_CFXMLParserContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field type='l' declared_type='CFIndex' name='version' type64='q'/>
<field type='^v' declared_type='void*' name='info'/>
<field type='^?' declared_type='CFXMLParserRetainCallBack' name='retain' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</field>
<field type='^?' declared_type='CFXMLParserReleaseCallBack' name='release' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='v' declared_type='void'/>
</field>
<field type='^?' declared_type='CFXMLParserCopyDescriptionCallBack' name='copyDescription' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFXMLProcessingInstructionInfo=&quot;dataString&quot;^{__CFString}}' name='CFXMLProcessingInstructionInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='dataString'/>
</struct>
<struct type='{IUnknownVTbl=&quot;_reserved&quot;^v&quot;QueryInterface&quot;^?&quot;AddRef&quot;^?&quot;Release&quot;^?}' name='IUnknownVTbl'>
<field type='^v' declared_type='void*' name='_reserved'/>
<field type='^?' declared_type='HRESULT (*)(void *, REFIID, LPVOID *)' name='QueryInterface' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='{_REFIID=CCCCCCCCCCCCCCCC}' declared_type='REFIID'/>
<arg type='^^v' declared_type='LPVOID*'/>
<retval type='l' declared_type='HRESULT' type64='i'/>
</field>
<field type='^?' declared_type='ULONG (*)(void *)' name='AddRef' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='L' declared_type='ULONG' type64='I'/>
</field>
<field type='^?' declared_type='ULONG (*)(void *)' name='Release' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='L' declared_type='ULONG' type64='I'/>
</field>
</struct>
<struct type='{_REFIID=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='REFIID'>
<field type='C' declared_type='UInt8' name='byte0'/>
<field type='C' declared_type='UInt8' name='byte1'/>
<field type='C' declared_type='UInt8' name='byte2'/>
<field type='C' declared_type='UInt8' name='byte3'/>
<field type='C' declared_type='UInt8' name='byte4'/>
<field type='C' declared_type='UInt8' name='byte5'/>
<field type='C' declared_type='UInt8' name='byte6'/>
<field type='C' declared_type='UInt8' name='byte7'/>
<field type='C' declared_type='UInt8' name='byte8'/>
<field type='C' declared_type='UInt8' name='byte9'/>
<field type='C' declared_type='UInt8' name='byte10'/>
<field type='C' declared_type='UInt8' name='byte11'/>
<field type='C' declared_type='UInt8' name='byte12'/>
<field type='C' declared_type='UInt8' name='byte13'/>
<field type='C' declared_type='UInt8' name='byte14'/>
<field type='C' declared_type='UInt8' name='byte15'/>
</struct>
<cftype type='^{__CFAllocator=}' name='CFAllocatorRef' tollfree='__NSCFType' gettypeid_func='CFAllocatorGetTypeID'/>
<cftype type='^{__CFArray=}' name='CFArrayRef' tollfree='__NSCFArray' gettypeid_func='CFArrayGetTypeID'/>
<cftype type='^{__CFAttributedString=}' name='CFAttributedStringRef' tollfree='__NSCFAttributedString' gettypeid_func='CFAttributedStringGetTypeID'/>
<cftype type='^{__CFBag=}' name='CFBagRef' tollfree='__NSCFType' gettypeid_func='CFBagGetTypeID'/>
<cftype type='^{__CFBinaryHeap=}' name='CFBinaryHeapRef' tollfree='__NSCFType' gettypeid_func='CFBinaryHeapGetTypeID'/>
<cftype type='^{__CFBitVector=}' name='CFBitVectorRef' tollfree='__NSCFType' gettypeid_func='CFBitVectorGetTypeID'/>
<cftype type='^{__CFBoolean=}' name='CFBooleanRef' tollfree='__NSCFBoolean' gettypeid_func='CFBooleanGetTypeID'/>
<cftype type='^{__CFBundle=}' name='CFBundleRef' tollfree='__NSCFType' gettypeid_func='CFBundleGetTypeID'/>
<cftype type='^{__CFCalendar=}' name='CFCalendarRef' tollfree='__NSCFCalendar' gettypeid_func='CFCalendarGetTypeID'/>
<cftype type='^{__CFCharacterSet=}' name='CFCharacterSetRef' tollfree='__NSCFCharacterSet' gettypeid_func='CFCharacterSetGetTypeID'/>
<cftype type='^{__CFData=}' name='CFDataRef' tollfree='__NSCFData' gettypeid_func='CFDataGetTypeID'/>
<cftype type='^{__CFDateFormatter=}' name='CFDateFormatterRef' tollfree='__NSCFType' gettypeid_func='CFDateFormatterGetTypeID'/>
<cftype type='^{__CFDate=}' name='CFDateRef' tollfree='__NSCFType' gettypeid_func='CFDateGetTypeID'/>
<cftype type='^{__CFDictionary=}' name='CFDictionaryRef' tollfree='__NSCFDictionary' gettypeid_func='CFDictionaryGetTypeID'/>
<cftype type='^{__CFError=}' name='CFErrorRef' tollfree='__NSCFError' gettypeid_func='CFErrorGetTypeID'/>
<cftype type='^{__CFFileDescriptor=}' name='CFFileDescriptorRef' tollfree='__NSCFType' gettypeid_func='CFFileDescriptorGetTypeID'/>
<cftype type='^{__CFFileSecurity=}' name='CFFileSecurityRef' tollfree='__NSCFType' gettypeid_func='CFFileSecurityGetTypeID'/>
<cftype type='^{__CFLocale=}' name='CFLocaleRef' tollfree='__NSCFLocale' gettypeid_func='CFLocaleGetTypeID'/>
<cftype type='^{__CFMachPort=}' name='CFMachPortRef' tollfree='NSMachPort' gettypeid_func='CFMachPortGetTypeID'/>
<cftype type='^{__CFMessagePort=}' name='CFMessagePortRef' tollfree='__NSCFType' gettypeid_func='CFMessagePortGetTypeID'/>
<cftype type='^{__CFArray=}' name='CFMutableArrayRef' tollfree='__NSCFArray' gettypeid_func='CFArrayGetTypeID'/>
<cftype type='^{__CFAttributedString=}' name='CFMutableAttributedStringRef' tollfree='__NSCFAttributedString' gettypeid_func='CFAttributedStringGetTypeID'/>
<cftype type='^{__CFBag=}' name='CFMutableBagRef' tollfree='__NSCFType' gettypeid_func='CFBagGetTypeID'/>
<cftype type='^{__CFBitVector=}' name='CFMutableBitVectorRef' tollfree='__NSCFType' gettypeid_func='CFBitVectorGetTypeID'/>
<cftype type='^{__CFCharacterSet=}' name='CFMutableCharacterSetRef' tollfree='__NSCFCharacterSet' gettypeid_func='CFCharacterSetGetTypeID'/>
<cftype type='^{__CFData=}' name='CFMutableDataRef' tollfree='__NSCFData' gettypeid_func='CFDataGetTypeID'/>
<cftype type='^{__CFDictionary=}' name='CFMutableDictionaryRef' tollfree='__NSCFDictionary' gettypeid_func='CFDictionaryGetTypeID'/>
<cftype type='^{__CFSet=}' name='CFMutableSetRef' tollfree='__NSCFSet' gettypeid_func='CFSetGetTypeID'/>
<cftype type='^{__CFString=}' name='CFMutableStringRef' tollfree='__NSCFString' gettypeid_func='CFStringGetTypeID'/>
<cftype type='^{__CFNotificationCenter=}' name='CFNotificationCenterRef' tollfree='__NSCFType' gettypeid_func='CFNotificationCenterGetTypeID'/>
<cftype type='^{__CFNull=}' name='CFNullRef' tollfree='NSNull' gettypeid_func='CFNullGetTypeID'/>
<cftype type='^{__CFNumberFormatter=}' name='CFNumberFormatterRef' tollfree='__NSCFType' gettypeid_func='CFNumberFormatterGetTypeID'/>
<cftype type='^{__CFNumber=}' name='CFNumberRef' tollfree='__NSCFNumber' gettypeid_func='CFNumberGetTypeID'/>
<cftype type='^{__CFPlugInInstance=}' name='CFPlugInInstanceRef' tollfree='__NSCFType' gettypeid_func='CFPlugInInstanceGetTypeID'/>
<cftype type='^{__CFBundle=}' name='CFPlugInRef' tollfree='__NSCFType' gettypeid_func='CFPlugInGetTypeID'/>
<cftype type='^{__CFReadStream=}' name='CFReadStreamRef' tollfree='__NSCFInputStream' gettypeid_func='CFReadStreamGetTypeID'/>
<cftype type='^{__CFRunLoopObserver=}' name='CFRunLoopObserverRef' tollfree='__NSCFType' gettypeid_func='CFRunLoopObserverGetTypeID'/>
<cftype type='^{__CFRunLoop=}' name='CFRunLoopRef' tollfree='__NSCFType' gettypeid_func='CFRunLoopGetTypeID'/>
<cftype type='^{__CFRunLoopSource=}' name='CFRunLoopSourceRef' tollfree='__NSCFType' gettypeid_func='CFRunLoopSourceGetTypeID'/>
<cftype type='^{__CFRunLoopTimer=}' name='CFRunLoopTimerRef' tollfree='__NSCFTimer' gettypeid_func='CFRunLoopTimerGetTypeID'/>
<cftype type='^{__CFSet=}' name='CFSetRef' tollfree='__NSCFSet' gettypeid_func='CFSetGetTypeID'/>
<cftype type='^{__CFSocket=}' name='CFSocketRef' tollfree='__NSCFType' gettypeid_func='CFSocketGetTypeID'/>
<cftype type='^{__CFString=}' name='CFStringRef' tollfree='__NSCFString' gettypeid_func='CFStringGetTypeID'/>
<cftype type='^{__CFStringTokenizer=}' name='CFStringTokenizerRef' tollfree='__NSCFType' gettypeid_func='CFStringTokenizerGetTypeID'/>
<cftype type='^{__CFTimeZone=}' name='CFTimeZoneRef' tollfree='__NSCFType' gettypeid_func='CFTimeZoneGetTypeID'/>
<cftype type='^{__CFTree=}' name='CFTreeRef' tollfree='__NSCFType' gettypeid_func='CFTreeGetTypeID'/>
<cftype type='^v' name='CFTypeRef'/>
<cftype type='^{__CFURLEnumerator=}' name='CFURLEnumeratorRef' tollfree='__NSCFType' gettypeid_func='CFURLEnumeratorGetTypeID'/>
<cftype type='^{__CFURL=}' name='CFURLRef' tollfree='NSURL' gettypeid_func='CFURLGetTypeID'/>
<cftype type='^{__CFUUID=}' name='CFUUIDRef' tollfree='__NSCFType' gettypeid_func='CFUUIDGetTypeID'/>
<cftype type='^{__CFUserNotification=}' name='CFUserNotificationRef' tollfree='__NSCFType' gettypeid_func='CFUserNotificationGetTypeID'/>
<cftype type='^{__CFWriteStream=}' name='CFWriteStreamRef' tollfree='__NSCFOutputStream' gettypeid_func='CFWriteStreamGetTypeID'/>
<cftype type='^{__CFXMLNode=}' name='CFXMLNodeRef' tollfree='__NSCFType' gettypeid_func='CFXMLNodeGetTypeID'/>
<cftype type='^{__CFXMLParser=}' name='CFXMLParserRef' tollfree='__NSCFType' gettypeid_func='CFXMLParserGetTypeID'/>
<constant type='d' declared_type='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1904' const='true'/>
<constant type='d' declared_type='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1970' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorDefault' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorMalloc' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorMallocZone' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorNull' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorSystemDefault' const='true'/>
<constant type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorUseContext' const='true'/>
<constant type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='kCFBooleanFalse' const='true'/>
<constant type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='kCFBooleanTrue' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBuddhistCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleDevelopmentRegionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleExecutableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleIdentifierKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleInfoDictionaryVersionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleLocalizationsKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleVersionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFChineseCalendar' const='true'/>
<constant type='{_CFBagCallBacks=i^?^?^?^?^?}' declared_type='CFBagCallBacks' name='kCFCopyStringBagCallBacks' const='true' type64='{_CFBagCallBacks=q^?^?^?^?^?}'/>
<constant type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks' name='kCFCopyStringDictionaryKeyCallBacks' const='true' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<constant type='{_CFSetCallBacks=i^?^?^?^?^?}' declared_type='CFSetCallBacks' name='kCFCopyStringSetCallBacks' const='true' type64='{_CFSetCallBacks=q^?^?^?^?^?}'/>
<constant type='d' declared_type='double' name='kCFCoreFoundationVersionNumber'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterAMSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterCalendarName' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDefaultDate' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDefaultFormat' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDoesRelativeDateFormattingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterEraSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterGregorianStartDate' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterIsLenient' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterLongEraSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterPMSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterQuarterSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortQuarterSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneQuarterSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneQuarterSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterTimeZone' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterTwoDigitStartDate' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortStandaloneMonthSymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortStandaloneWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterWeekdaySymbols' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDescriptionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainCocoa' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainMach' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainOSStatus' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainPOSIX' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorFilePathKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedDescriptionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedFailureReasonKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedRecoverySuggestionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorUnderlyingErrorKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFGregorianCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFHebrewCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFISO8601Calendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFIndianCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFIslamicCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFIslamicCivilCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFJapaneseCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleAlternateQuotationBeginDelimiterKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleAlternateQuotationEndDelimiterKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCalendarIdentifier' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCollationIdentifier' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCollatorIdentifier' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCountryCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrencyCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrencySymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrentLocaleDidChangeNotification' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleDecimalSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleExemplarCharacterSet' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleGroupingSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleIdentifier' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleLanguageCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleMeasurementSystem' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleQuotationBeginDelimiterKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleQuotationEndDelimiterKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleScriptCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleUsesMetricSystem' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleVariantCode' const='true'/>
<constant type='^{__CFNull=}' declared_type='CFNullRef' name='kCFNull' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterAlwaysShowDecimalSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyDecimalSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyGroupingSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencySymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterDecimalSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterDefaultFormat' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterExponentSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterFormatWidth' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterGroupingSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterGroupingSize' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterInfinitySymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterInternationalCurrencySymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterIsLenient' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxFractionDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxIntegerDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxSignificantDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinFractionDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinIntegerDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinSignificantDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinusSign' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMultiplier' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNaNSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNegativePrefix' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNegativeSuffix' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPaddingCharacter' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPaddingPosition' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPerMillSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPercentSymbol' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPlusSign' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPositivePrefix' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPositiveSuffix' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterRoundingIncrement' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterRoundingMode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterSecondaryGroupingSize' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterUseGroupingSeparator' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterUseSignificantDigits' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterZeroSymbol' const='true'/>
<constant type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberNaN' const='true'/>
<constant type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberNegativeInfinity' const='true'/>
<constant type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberPositiveInfinity' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPersianCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInDynamicRegisterFunctionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInDynamicRegistrationKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInFactoriesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInTypesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInUnloadFunctionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyApplication' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyHost' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyUser' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentApplication' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentHost' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentUser' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFRepublicOfChinaCalendar' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFRunLoopCommonModes' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFRunLoopDefaultMode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketCommandKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketErrorKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketRegisterCommand' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketResultKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketRetrieveCommand' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketValueKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyAppendToFile' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyDataWritten' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyFileCurrentOffset' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketNativeHandle' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketRemoteHostName' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketRemotePortNumber' const='true'/>
<constant type='{_CFBinaryHeapCallBacks=i^?^?^?^?}' declared_type='CFBinaryHeapCallBacks' name='kCFStringBinaryHeapCallBacks' const='true' type64='{_CFBinaryHeapCallBacks=q^?^?^?^?}'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformFullwidthHalfwidth' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformHiraganaKatakana' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinArabic' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinCyrillic' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinGreek' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHangul' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHebrew' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHiragana' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinKatakana' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinThai' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformMandarinLatin' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformStripCombiningMarks' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformStripDiacritics' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToLatin' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToUnicodeName' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToXMLHex' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFTimeZoneSystemTimeZoneDidChangeNotification' const='true'/>
<constant type='{_CFArrayCallBacks=i^?^?^?^?}' declared_type='CFArrayCallBacks' name='kCFTypeArrayCallBacks' const='true' type64='{_CFArrayCallBacks=q^?^?^?^?}'/>
<constant type='{_CFBagCallBacks=i^?^?^?^?^?}' declared_type='CFBagCallBacks' name='kCFTypeBagCallBacks' const='true' type64='{_CFBagCallBacks=q^?^?^?^?^?}'/>
<constant type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks' name='kCFTypeDictionaryKeyCallBacks' const='true' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<constant type='{_CFDictionaryValueCallBacks=i^?^?^?^?}' declared_type='CFDictionaryValueCallBacks' name='kCFTypeDictionaryValueCallBacks' const='true' type64='{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<constant type='{_CFSetCallBacks=i^?^?^?^?^?}' declared_type='CFSetCallBacks' name='kCFTypeSetCallBacks' const='true' type64='{_CFSetCallBacks=q^?^?^?^?^?}'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLAttributeModificationDateKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLContentAccessDateKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLContentModificationDateKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLCreationDateKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLCustomIconKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLEffectiveIconKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileAllocatedSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileDirectoryContents' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileExists' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileLastModificationTime' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileLength' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileOwnerID' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFilePOSIXMode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceIdentifierKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeBlockSpecial' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeCharacterSpecial' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeDirectory' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeNamedPipe' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeRegular' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeSocket' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeSymbolicLink' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeUnknown' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileSecurityKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHTTPStatusCode' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHTTPStatusLine' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHasHiddenExtensionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsAliasFileKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsDirectoryKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsExcludedFromBackupKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsExecutableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsHiddenKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsMountTriggerKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsPackageKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsReadableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsRegularFileKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsSymbolicLinkKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsSystemImmutableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsUbiquitousItemKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsUserImmutableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsVolumeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsWritableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLKeysOfUnsetValuesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLabelColorKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLabelNumberKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLinkCountKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedLabelKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedTypeDescriptionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLParentDirectoryURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLPathKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLPreferredIOBlockSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTotalFileAllocatedSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTotalFileSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTypeIdentifierKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemHasUnresolvedConflictsKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsDownloadedKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsDownloadingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsUploadedKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsUploadingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemPercentDownloadedKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemPercentUploadedKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeAvailableCapacityKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeCreationDateKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIdentifierKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsAutomountedKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsBrowsableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsEjectableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsInternalKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsJournalingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsLocalKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsReadOnlyKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsRemovableKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeLocalizedFormatDescriptionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeLocalizedNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeMaximumFileSizeKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeNameKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeResourceCountKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsAdvisoryFileLockingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsCasePreservedNamesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsCaseSensitiveNamesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsExtendedSecurityKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsHardLinksKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsJournalingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsPersistentIDsKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsRenamingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsRootDirectoryDatesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsSparseFilesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsSymbolicLinksKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsVolumeSizesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsZeroRunsKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeTotalCapacityKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeURLForRemountingKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeUUIDStringKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlertHeaderKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlertMessageKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlternateButtonTitleKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationCheckBoxTitlesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationDefaultButtonTitleKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationIconURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationLocalizationURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationOtherButtonTitleKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationPopUpSelectionKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationPopUpTitlesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationProgressIndicatorValueKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationSoundURLKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationTextFieldTitlesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationTextFieldValuesKey' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorDescription' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorLineNumber' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorLocation' const='true'/>
<constant type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorStatusCode' const='true'/>
<enum name='CFByteOrderBigEndian' value='2'/>
<enum name='CFByteOrderLittleEndian' value='1'/>
<enum name='CFByteOrderUnknown' value='0'/>
<enum name='CFNotificationSuspensionBehaviorCoalesce' value='2'/>
<enum name='CFNotificationSuspensionBehaviorDeliverImmediately' value='4'/>
<enum name='CFNotificationSuspensionBehaviorDrop' value='1'/>
<enum name='CFNotificationSuspensionBehaviorHold' value='3'/>
<enum name='CF_USE_OSBYTEORDER_H' value='1'/>
<enum name='COREFOUNDATION_CFPLUGINCOM_SEPARATE' value='1'/>
<enum name='E_ABORT' value='-2147483641'/>
<enum name='E_ACCESSDENIED' value='-2147483639'/>
<enum name='E_FAIL' value='-2147483640'/>
<enum name='E_HANDLE' value='-2147483642'/>
<enum name='E_INVALIDARG' value='-2147483645'/>
<enum name='E_NOINTERFACE' value='-2147483644'/>
<enum name='E_NOTIMPL' value='-2147483647'/>
<enum name='E_OUTOFMEMORY' value='-2147483646'/>
<enum name='E_POINTER' value='-2147483643'/>
<enum name='E_UNEXPECTED' value='-2147418113'/>
<enum name='FALSE' value='0'/>
<enum name='SEVERITY_ERROR' value='1'/>
<enum name='SEVERITY_SUCCESS' value='0'/>
<enum name='S_FALSE' value='1'/>
<enum name='S_OK' value='0'/>
<enum name='TRUE' value='1'/>
<enum name='kCFBookmarkResolutionWithoutMountingMask' value='512'/>
<enum name='kCFBookmarkResolutionWithoutUIMask' value='256'/>
<enum name='kCFBundleExecutableArchitectureI386' value='7'/>
<enum name='kCFBundleExecutableArchitecturePPC' value='18'/>
<enum name='kCFBundleExecutableArchitecturePPC64' value='16777234'/>
<enum name='kCFBundleExecutableArchitectureX86_64' value='16777223'/>
<enum name='kCFCalendarComponentsWrap' value='1'/>
<enum name='kCFCalendarUnitDay' value='16'/>
<enum name='kCFCalendarUnitEra' value='2'/>
<enum name='kCFCalendarUnitHour' value='32'/>
<enum name='kCFCalendarUnitMinute' value='64'/>
<enum name='kCFCalendarUnitMonth' value='8'/>
<enum name='kCFCalendarUnitQuarter' value='2048'/>
<enum name='kCFCalendarUnitSecond' value='128'/>
<enum name='kCFCalendarUnitWeek' value='256'/>
<enum name='kCFCalendarUnitWeekOfMonth' value='4096'/>
<enum name='kCFCalendarUnitWeekOfYear' value='8192'/>
<enum name='kCFCalendarUnitWeekday' value='512'/>
<enum name='kCFCalendarUnitWeekdayOrdinal' value='1024'/>
<enum name='kCFCalendarUnitYear' value='4'/>
<enum name='kCFCalendarUnitYearForWeekOfYear' value='16384'/>
<enum name='kCFCharacterSetAlphaNumeric' value='10'/>
<enum name='kCFCharacterSetCapitalizedLetter' value='13'/>
<enum name='kCFCharacterSetControl' value='1'/>
<enum name='kCFCharacterSetDecimalDigit' value='4'/>
<enum name='kCFCharacterSetDecomposable' value='9'/>
<enum name='kCFCharacterSetIllegal' value='12'/>
<enum name='kCFCharacterSetLetter' value='5'/>
<enum name='kCFCharacterSetLowercaseLetter' value='6'/>
<enum name='kCFCharacterSetNewline' value='15'/>
<enum name='kCFCharacterSetNonBase' value='8'/>
<enum name='kCFCharacterSetPunctuation' value='11'/>
<enum name='kCFCharacterSetSymbol' value='14'/>
<enum name='kCFCharacterSetUppercaseLetter' value='7'/>
<enum name='kCFCharacterSetWhitespace' value='2'/>
<enum name='kCFCharacterSetWhitespaceAndNewline' value='3'/>
<enum name='kCFCompareAnchored' value='8'/>
<enum name='kCFCompareBackwards' value='4'/>
<enum name='kCFCompareCaseInsensitive' value='1'/>
<enum name='kCFCompareDiacriticInsensitive' value='128'/>
<enum name='kCFCompareEqualTo' value='0'/>
<enum name='kCFCompareForcedOrdering' value='512'/>
<enum name='kCFCompareGreaterThan' value='1'/>
<enum name='kCFCompareLessThan' value='-1'/>
<enum name='kCFCompareLocalized' value='32'/>
<enum name='kCFCompareNonliteral' value='16'/>
<enum name='kCFCompareNumerically' value='64'/>
<enum name='kCFCompareWidthInsensitive' value='256'/>
<enum name='kCFCoreFoundationVersionNumber10_0' value='196.40'/>
<enum name='kCFCoreFoundationVersionNumber10_0_3' value='196.50'/>
<enum name='kCFCoreFoundationVersionNumber10_1' value='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_1_1' value='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_1_2' value='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_3' value='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_4' value='227.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2' value='263.00'/>
<enum name='kCFCoreFoundationVersionNumber10_2_1' value='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_2' value='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_3' value='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_4' value='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_5' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_6' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_7' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_8' value='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_3' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_1' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_2' value='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_3' value='299.30'/>
<enum name='kCFCoreFoundationVersionNumber10_3_4' value='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_5' value='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_6' value='299.32'/>
<enum name='kCFCoreFoundationVersionNumber10_3_7' value='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_8' value='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_9' value='299.35'/>
<enum name='kCFCoreFoundationVersionNumber10_4' value='368.00'/>
<enum name='kCFCoreFoundationVersionNumber10_4_1' value='368.10'/>
<enum name='kCFCoreFoundationVersionNumber10_4_10' value='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_4_11' value='368.31'/>
<enum name='kCFCoreFoundationVersionNumber10_4_2' value='368.11'/>
<enum name='kCFCoreFoundationVersionNumber10_4_3' value='368.18'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_Intel' value='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_PowerPC' value='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_7' value='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_8' value='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_9' value='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_5' value='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_1' value='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_2' value='476.10'/>
<enum name='kCFCoreFoundationVersionNumber10_5_3' value='476.13'/>
<enum name='kCFCoreFoundationVersionNumber10_5_4' value='476.14'/>
<enum name='kCFCoreFoundationVersionNumber10_5_5' value='476.15'/>
<enum name='kCFCoreFoundationVersionNumber10_5_6' value='476.17'/>
<enum name='kCFCoreFoundationVersionNumber10_5_7' value='476.18'/>
<enum name='kCFCoreFoundationVersionNumber10_5_8' value='476.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6' value='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_1' value='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_2' value='550.13'/>
<enum name='kCFCoreFoundationVersionNumber10_6_3' value='550.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6_4' value='550.29'/>
<enum name='kCFCoreFoundationVersionNumber10_6_5' value='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_6' value='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_7' value='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_8' value='550.43'/>
<enum name='kCFCoreFoundationVersionNumber10_7' value='635.00'/>
<enum name='kCFCoreFoundationVersionNumber10_7_1' value='635.00'/>
<enum name='kCFCoreFoundationVersionNumber10_7_2' value='635.15'/>
<enum name='kCFCoreFoundationVersionNumber10_7_3' value='635.19'/>
<enum name='kCFCoreFoundationVersionNumber10_7_4' value='635.21'/>
<enum name='kCFDataSearchAnchored' value='2'/>
<enum name='kCFDataSearchBackwards' value='1'/>
<enum name='kCFDateFormatterFullStyle' value='4'/>
<enum name='kCFDateFormatterLongStyle' value='3'/>
<enum name='kCFDateFormatterMediumStyle' value='2'/>
<enum name='kCFDateFormatterNoStyle' value='0'/>
<enum name='kCFDateFormatterShortStyle' value='1'/>
<enum name='kCFFileDescriptorReadCallBack' value='1'/>
<enum name='kCFFileDescriptorWriteCallBack' value='2'/>
<enum name='kCFFileSecurityClearAccessControlList' value='32'/>
<enum name='kCFFileSecurityClearGroup' value='2'/>
<enum name='kCFFileSecurityClearGroupUUID' value='16'/>
<enum name='kCFFileSecurityClearMode' value='4'/>
<enum name='kCFFileSecurityClearOwner' value='1'/>
<enum name='kCFFileSecurityClearOwnerUUID' value='8'/>
<enum name='kCFGregorianAllUnits' value='16777215'/>
<enum name='kCFGregorianUnitsDays' value='4'/>
<enum name='kCFGregorianUnitsHours' value='8'/>
<enum name='kCFGregorianUnitsMinutes' value='16'/>
<enum name='kCFGregorianUnitsMonths' value='2'/>
<enum name='kCFGregorianUnitsSeconds' value='32'/>
<enum name='kCFGregorianUnitsYears' value='1'/>
<enum name='kCFLocaleLanguageDirectionBottomToTop' value='4'/>
<enum name='kCFLocaleLanguageDirectionLeftToRight' value='1'/>
<enum name='kCFLocaleLanguageDirectionRightToLeft' value='2'/>
<enum name='kCFLocaleLanguageDirectionTopToBottom' value='3'/>
<enum name='kCFLocaleLanguageDirectionUnknown' value='0'/>
<enum name='kCFMessagePortBecameInvalidError' value='-5'/>
<enum name='kCFMessagePortIsInvalid' value='-3'/>
<enum name='kCFMessagePortReceiveTimeout' value='-2'/>
<enum name='kCFMessagePortSendTimeout' value='-1'/>
<enum name='kCFMessagePortSuccess' value='0'/>
<enum name='kCFMessagePortTransportError' value='-4'/>
<enum name='kCFNotFound' value='-1'/>
<enum name='kCFNotificationDeliverImmediately' value='1'/>
<enum name='kCFNotificationPostToAllSessions' value='2'/>
<enum name='kCFNumberCFIndexType' value='14'/>
<enum name='kCFNumberCGFloatType' value='16'/>
<enum name='kCFNumberCharType' value='7'/>
<enum name='kCFNumberDoubleType' value='13'/>
<enum name='kCFNumberFloat32Type' value='5'/>
<enum name='kCFNumberFloat64Type' value='6'/>
<enum name='kCFNumberFloatType' value='12'/>
<enum name='kCFNumberFormatterCurrencyStyle' value='2'/>
<enum name='kCFNumberFormatterDecimalStyle' value='1'/>
<enum name='kCFNumberFormatterNoStyle' value='0'/>
<enum name='kCFNumberFormatterPadAfterPrefix' value='1'/>
<enum name='kCFNumberFormatterPadAfterSuffix' value='3'/>
<enum name='kCFNumberFormatterPadBeforePrefix' value='0'/>
<enum name='kCFNumberFormatterPadBeforeSuffix' value='2'/>
<enum name='kCFNumberFormatterParseIntegersOnly' value='1'/>
<enum name='kCFNumberFormatterPercentStyle' value='3'/>
<enum name='kCFNumberFormatterRoundCeiling' value='0'/>
<enum name='kCFNumberFormatterRoundDown' value='2'/>
<enum name='kCFNumberFormatterRoundFloor' value='1'/>
<enum name='kCFNumberFormatterRoundHalfDown' value='5'/>
<enum name='kCFNumberFormatterRoundHalfEven' value='4'/>
<enum name='kCFNumberFormatterRoundHalfUp' value='6'/>
<enum name='kCFNumberFormatterRoundUp' value='3'/>
<enum name='kCFNumberFormatterScientificStyle' value='4'/>
<enum name='kCFNumberFormatterSpellOutStyle' value='5'/>
<enum name='kCFNumberIntType' value='9'/>
<enum name='kCFNumberLongLongType' value='11'/>
<enum name='kCFNumberLongType' value='10'/>
<enum name='kCFNumberMaxType' value='16'/>
<enum name='kCFNumberNSIntegerType' value='15'/>
<enum name='kCFNumberSInt16Type' value='2'/>
<enum name='kCFNumberSInt32Type' value='3'/>
<enum name='kCFNumberSInt64Type' value='4'/>
<enum name='kCFNumberSInt8Type' value='1'/>
<enum name='kCFNumberShortType' value='8'/>
<enum name='kCFPropertyListBinaryFormat_v1_0' value='200'/>
<enum name='kCFPropertyListImmutable' value='0'/>
<enum name='kCFPropertyListMutableContainers' value='1'/>
<enum name='kCFPropertyListMutableContainersAndLeaves' value='2'/>
<enum name='kCFPropertyListOpenStepFormat' value='1'/>
<enum name='kCFPropertyListReadCorruptError' value='3840'/>
<enum name='kCFPropertyListReadStreamError' value='3842'/>
<enum name='kCFPropertyListReadUnknownVersionError' value='3841'/>
<enum name='kCFPropertyListWriteStreamError' value='3851'/>
<enum name='kCFPropertyListXMLFormat_v1_0' value='100'/>
<enum name='kCFRunLoopAfterWaiting' value='64'/>
<enum name='kCFRunLoopAllActivities' value='268435455'/>
<enum name='kCFRunLoopBeforeSources' value='4'/>
<enum name='kCFRunLoopBeforeTimers' value='2'/>
<enum name='kCFRunLoopBeforeWaiting' value='32'/>
<enum name='kCFRunLoopEntry' value='1'/>
<enum name='kCFRunLoopExit' value='128'/>
<enum name='kCFRunLoopRunFinished' value='1'/>
<enum name='kCFRunLoopRunHandledSource' value='4'/>
<enum name='kCFRunLoopRunStopped' value='2'/>
<enum name='kCFRunLoopRunTimedOut' value='3'/>
<enum name='kCFSocketAcceptCallBack' value='2'/>
<enum name='kCFSocketAutomaticallyReenableAcceptCallBack' value='2'/>
<enum name='kCFSocketAutomaticallyReenableDataCallBack' value='3'/>
<enum name='kCFSocketAutomaticallyReenableReadCallBack' value='1'/>
<enum name='kCFSocketAutomaticallyReenableWriteCallBack' value='8'/>
<enum name='kCFSocketCloseOnInvalidate' value='128'/>
<enum name='kCFSocketConnectCallBack' value='4'/>
<enum name='kCFSocketDataCallBack' value='3'/>
<enum name='kCFSocketError' value='-1'/>
<enum name='kCFSocketLeaveErrors' value='64'/>
<enum name='kCFSocketNoCallBack' value='0'/>
<enum name='kCFSocketReadCallBack' value='1'/>
<enum name='kCFSocketSuccess' value='0'/>
<enum name='kCFSocketTimeout' value='-2'/>
<enum name='kCFSocketWriteCallBack' value='8'/>
<enum name='kCFStreamErrorDomainCustom' value='-1'/>
<enum name='kCFStreamErrorDomainMacOSStatus' value='2'/>
<enum name='kCFStreamErrorDomainPOSIX' value='1'/>
<enum name='kCFStreamEventCanAcceptBytes' value='4'/>
<enum name='kCFStreamEventEndEncountered' value='16'/>
<enum name='kCFStreamEventErrorOccurred' value='8'/>
<enum name='kCFStreamEventHasBytesAvailable' value='2'/>
<enum name='kCFStreamEventNone' value='0'/>
<enum name='kCFStreamEventOpenCompleted' value='1'/>
<enum name='kCFStreamStatusAtEnd' value='5'/>
<enum name='kCFStreamStatusClosed' value='6'/>
<enum name='kCFStreamStatusError' value='7'/>
<enum name='kCFStreamStatusNotOpen' value='0'/>
<enum name='kCFStreamStatusOpen' value='2'/>
<enum name='kCFStreamStatusOpening' value='1'/>
<enum name='kCFStreamStatusReading' value='3'/>
<enum name='kCFStreamStatusWriting' value='4'/>
<enum name='kCFStringEncodingANSEL' value='1537'/>
<enum name='kCFStringEncodingASCII' value='1536'/>
<enum name='kCFStringEncodingBig5' value='2563'/>
<enum name='kCFStringEncodingBig5_E' value='2569'/>
<enum name='kCFStringEncodingBig5_HKSCS_1999' value='2566'/>
<enum name='kCFStringEncodingCNS_11643_92_P1' value='1617'/>
<enum name='kCFStringEncodingCNS_11643_92_P2' value='1618'/>
<enum name='kCFStringEncodingCNS_11643_92_P3' value='1619'/>
<enum name='kCFStringEncodingDOSArabic' value='1049'/>
<enum name='kCFStringEncodingDOSBalticRim' value='1030'/>
<enum name='kCFStringEncodingDOSCanadianFrench' value='1048'/>
<enum name='kCFStringEncodingDOSChineseSimplif' value='1057'/>
<enum name='kCFStringEncodingDOSChineseTrad' value='1059'/>
<enum name='kCFStringEncodingDOSCyrillic' value='1043'/>
<enum name='kCFStringEncodingDOSGreek' value='1029'/>
<enum name='kCFStringEncodingDOSGreek1' value='1041'/>
<enum name='kCFStringEncodingDOSGreek2' value='1052'/>
<enum name='kCFStringEncodingDOSHebrew' value='1047'/>
<enum name='kCFStringEncodingDOSIcelandic' value='1046'/>
<enum name='kCFStringEncodingDOSJapanese' value='1056'/>
<enum name='kCFStringEncodingDOSKorean' value='1058'/>
<enum name='kCFStringEncodingDOSLatin1' value='1040'/>
<enum name='kCFStringEncodingDOSLatin2' value='1042'/>
<enum name='kCFStringEncodingDOSLatinUS' value='1024'/>
<enum name='kCFStringEncodingDOSNordic' value='1050'/>
<enum name='kCFStringEncodingDOSPortuguese' value='1045'/>
<enum name='kCFStringEncodingDOSRussian' value='1051'/>
<enum name='kCFStringEncodingDOSThai' value='1053'/>
<enum name='kCFStringEncodingDOSTurkish' value='1044'/>
<enum name='kCFStringEncodingEBCDIC_CP037' value='3074'/>
<enum name='kCFStringEncodingEBCDIC_US' value='3073'/>
<enum name='kCFStringEncodingEUC_CN' value='2352'/>
<enum name='kCFStringEncodingEUC_JP' value='2336'/>
<enum name='kCFStringEncodingEUC_KR' value='2368'/>
<enum name='kCFStringEncodingEUC_TW' value='2353'/>
<enum name='kCFStringEncodingGBK_95' value='1585'/>
<enum name='kCFStringEncodingGB_18030_2000' value='1586'/>
<enum name='kCFStringEncodingGB_2312_80' value='1584'/>
<enum name='kCFStringEncodingHZ_GB_2312' value='2565'/>
<enum name='kCFStringEncodingISOLatin1' value='513'/>
<enum name='kCFStringEncodingISOLatin10' value='528'/>
<enum name='kCFStringEncodingISOLatin2' value='514'/>
<enum name='kCFStringEncodingISOLatin3' value='515'/>
<enum name='kCFStringEncodingISOLatin4' value='516'/>
<enum name='kCFStringEncodingISOLatin5' value='521'/>
<enum name='kCFStringEncodingISOLatin6' value='522'/>
<enum name='kCFStringEncodingISOLatin7' value='525'/>
<enum name='kCFStringEncodingISOLatin8' value='526'/>
<enum name='kCFStringEncodingISOLatin9' value='527'/>
<enum name='kCFStringEncodingISOLatinArabic' value='518'/>
<enum name='kCFStringEncodingISOLatinCyrillic' value='517'/>
<enum name='kCFStringEncodingISOLatinGreek' value='519'/>
<enum name='kCFStringEncodingISOLatinHebrew' value='520'/>
<enum name='kCFStringEncodingISOLatinThai' value='523'/>
<enum name='kCFStringEncodingISO_2022_CN' value='2096'/>
<enum name='kCFStringEncodingISO_2022_CN_EXT' value='2097'/>
<enum name='kCFStringEncodingISO_2022_JP' value='2080'/>
<enum name='kCFStringEncodingISO_2022_JP_1' value='2082'/>
<enum name='kCFStringEncodingISO_2022_JP_2' value='2081'/>
<enum name='kCFStringEncodingISO_2022_JP_3' value='2083'/>
<enum name='kCFStringEncodingISO_2022_KR' value='2112'/>
<enum name='kCFStringEncodingInvalidId' value='4294967295'/>
<enum name='kCFStringEncodingJIS_C6226_78' value='1572'/>
<enum name='kCFStringEncodingJIS_X0201_76' value='1568'/>
<enum name='kCFStringEncodingJIS_X0208_83' value='1569'/>
<enum name='kCFStringEncodingJIS_X0208_90' value='1570'/>
<enum name='kCFStringEncodingJIS_X0212_90' value='1571'/>
<enum name='kCFStringEncodingKOI8_R' value='2562'/>
<enum name='kCFStringEncodingKOI8_U' value='2568'/>
<enum name='kCFStringEncodingKSC_5601_87' value='1600'/>
<enum name='kCFStringEncodingKSC_5601_92_Johab' value='1601'/>
<enum name='kCFStringEncodingMacArabic' value='4'/>
<enum name='kCFStringEncodingMacArmenian' value='24'/>
<enum name='kCFStringEncodingMacBengali' value='13'/>
<enum name='kCFStringEncodingMacBurmese' value='19'/>
<enum name='kCFStringEncodingMacCeltic' value='39'/>
<enum name='kCFStringEncodingMacCentralEurRoman' value='29'/>
<enum name='kCFStringEncodingMacChineseSimp' value='25'/>
<enum name='kCFStringEncodingMacChineseTrad' value='2'/>
<enum name='kCFStringEncodingMacCroatian' value='36'/>
<enum name='kCFStringEncodingMacCyrillic' value='7'/>
<enum name='kCFStringEncodingMacDevanagari' value='9'/>
<enum name='kCFStringEncodingMacDingbats' value='34'/>
<enum name='kCFStringEncodingMacEthiopic' value='28'/>
<enum name='kCFStringEncodingMacExtArabic' value='31'/>
<enum name='kCFStringEncodingMacFarsi' value='140'/>
<enum name='kCFStringEncodingMacGaelic' value='40'/>
<enum name='kCFStringEncodingMacGeorgian' value='23'/>
<enum name='kCFStringEncodingMacGreek' value='6'/>
<enum name='kCFStringEncodingMacGujarati' value='11'/>
<enum name='kCFStringEncodingMacGurmukhi' value='10'/>
<enum name='kCFStringEncodingMacHFS' value='255'/>
<enum name='kCFStringEncodingMacHebrew' value='5'/>
<enum name='kCFStringEncodingMacIcelandic' value='37'/>
<enum name='kCFStringEncodingMacInuit' value='236'/>
<enum name='kCFStringEncodingMacJapanese' value='1'/>
<enum name='kCFStringEncodingMacKannada' value='16'/>
<enum name='kCFStringEncodingMacKhmer' value='20'/>
<enum name='kCFStringEncodingMacKorean' value='3'/>
<enum name='kCFStringEncodingMacLaotian' value='22'/>
<enum name='kCFStringEncodingMacMalayalam' value='17'/>
<enum name='kCFStringEncodingMacMongolian' value='27'/>
<enum name='kCFStringEncodingMacOriya' value='12'/>
<enum name='kCFStringEncodingMacRoman' value='0'/>
<enum name='kCFStringEncodingMacRomanLatin1' value='2564'/>
<enum name='kCFStringEncodingMacRomanian' value='38'/>
<enum name='kCFStringEncodingMacSinhalese' value='18'/>
<enum name='kCFStringEncodingMacSymbol' value='33'/>
<enum name='kCFStringEncodingMacTamil' value='14'/>
<enum name='kCFStringEncodingMacTelugu' value='15'/>
<enum name='kCFStringEncodingMacThai' value='21'/>
<enum name='kCFStringEncodingMacTibetan' value='26'/>
<enum name='kCFStringEncodingMacTurkish' value='35'/>
<enum name='kCFStringEncodingMacUkrainian' value='152'/>
<enum name='kCFStringEncodingMacVT100' value='252'/>
<enum name='kCFStringEncodingMacVietnamese' value='30'/>
<enum name='kCFStringEncodingNextStepJapanese' value='2818'/>
<enum name='kCFStringEncodingNextStepLatin' value='2817'/>
<enum name='kCFStringEncodingNonLossyASCII' value='3071'/>
<enum name='kCFStringEncodingShiftJIS' value='2561'/>
<enum name='kCFStringEncodingShiftJIS_X0213' value='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_00' value='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_MenKuTen' value='1577'/>
<enum name='kCFStringEncodingUTF16' value='256'/>
<enum name='kCFStringEncodingUTF16BE' value='268435712'/>
<enum name='kCFStringEncodingUTF16LE' value='335544576'/>
<enum name='kCFStringEncodingUTF32' value='201326848'/>
<enum name='kCFStringEncodingUTF32BE' value='402653440'/>
<enum name='kCFStringEncodingUTF32LE' value='469762304'/>
<enum name='kCFStringEncodingUTF7' value='67109120'/>
<enum name='kCFStringEncodingUTF7_IMAP' value='2576'/>
<enum name='kCFStringEncodingUTF8' value='134217984'/>
<enum name='kCFStringEncodingUnicode' value='256'/>
<enum name='kCFStringEncodingVISCII' value='2567'/>
<enum name='kCFStringEncodingWindowsArabic' value='1286'/>
<enum name='kCFStringEncodingWindowsBalticRim' value='1287'/>
<enum name='kCFStringEncodingWindowsCyrillic' value='1282'/>
<enum name='kCFStringEncodingWindowsGreek' value='1283'/>
<enum name='kCFStringEncodingWindowsHebrew' value='1285'/>
<enum name='kCFStringEncodingWindowsKoreanJohab' value='1296'/>
<enum name='kCFStringEncodingWindowsLatin1' value='1280'/>
<enum name='kCFStringEncodingWindowsLatin2' value='1281'/>
<enum name='kCFStringEncodingWindowsLatin5' value='1284'/>
<enum name='kCFStringEncodingWindowsVietnamese' value='1288'/>
<enum name='kCFStringNormalizationFormC' value='2'/>
<enum name='kCFStringNormalizationFormD' value='0'/>
<enum name='kCFStringNormalizationFormKC' value='3'/>
<enum name='kCFStringNormalizationFormKD' value='1'/>
<enum name='kCFStringTokenizerAttributeLanguage' value='131072'/>
<enum name='kCFStringTokenizerAttributeLatinTranscription' value='65536'/>
<enum name='kCFStringTokenizerTokenHasDerivedSubTokensMask' value='4'/>
<enum name='kCFStringTokenizerTokenHasHasNumbersMask' value='8'/>
<enum name='kCFStringTokenizerTokenHasNonLettersMask' value='16'/>
<enum name='kCFStringTokenizerTokenHasSubTokensMask' value='2'/>
<enum name='kCFStringTokenizerTokenIsCJWordMask' value='32'/>
<enum name='kCFStringTokenizerTokenNone' value='0'/>
<enum name='kCFStringTokenizerTokenNormal' value='1'/>
<enum name='kCFStringTokenizerUnitLineBreak' value='3'/>
<enum name='kCFStringTokenizerUnitParagraph' value='2'/>
<enum name='kCFStringTokenizerUnitSentence' value='1'/>
<enum name='kCFStringTokenizerUnitWord' value='0'/>
<enum name='kCFStringTokenizerUnitWordBoundary' value='4'/>
<enum name='kCFTimeZoneNameStyleDaylightSaving' value='2'/>
<enum name='kCFTimeZoneNameStyleGeneric' value='4'/>
<enum name='kCFTimeZoneNameStyleShortDaylightSaving' value='3'/>
<enum name='kCFTimeZoneNameStyleShortGeneric' value='5'/>
<enum name='kCFTimeZoneNameStyleShortStandard' value='1'/>
<enum name='kCFTimeZoneNameStyleStandard' value='0'/>
<enum name='kCFURLBookmarkCreationMinimalBookmarkMask' value='512'/>
<enum name='kCFURLBookmarkCreationPreferFileIDResolutionMask' value='256'/>
<enum name='kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess' value='4096'/>
<enum name='kCFURLBookmarkCreationSuitableForBookmarkFile' value='1024'/>
<enum name='kCFURLBookmarkCreationWithSecurityScope' value='2048'/>
<enum name='kCFURLBookmarkResolutionWithSecurityScope' value='1024'/>
<enum name='kCFURLComponentFragment' value='12'/>
<enum name='kCFURLComponentHost' value='8'/>
<enum name='kCFURLComponentNetLocation' value='2'/>
<enum name='kCFURLComponentParameterString' value='10'/>
<enum name='kCFURLComponentPassword' value='6'/>
<enum name='kCFURLComponentPath' value='3'/>
<enum name='kCFURLComponentPort' value='9'/>
<enum name='kCFURLComponentQuery' value='11'/>
<enum name='kCFURLComponentResourceSpecifier' value='4'/>
<enum name='kCFURLComponentScheme' value='1'/>
<enum name='kCFURLComponentUser' value='5'/>
<enum name='kCFURLComponentUserInfo' value='7'/>
<enum name='kCFURLEnumeratorDefaultBehavior' value='0'/>
<enum name='kCFURLEnumeratorDescendRecursively' value='1'/>
<enum name='kCFURLEnumeratorDirectoryPostOrderSuccess' value='4'/>
<enum name='kCFURLEnumeratorEnd' value='2'/>
<enum name='kCFURLEnumeratorError' value='3'/>
<enum name='kCFURLEnumeratorGenerateFileReferenceURLs' value='4'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPostOrder' value='32'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPreOrder' value='16'/>
<enum name='kCFURLEnumeratorSkipInvisibles' value='2'/>
<enum name='kCFURLEnumeratorSkipPackageContents' value='8'/>
<enum name='kCFURLEnumeratorSuccess' value='1'/>
<enum name='kCFURLHFSPathStyle' value='1'/>
<enum name='kCFURLImproperArgumentsError' value='-15'/>
<enum name='kCFURLPOSIXPathStyle' value='0'/>
<enum name='kCFURLPropertyKeyUnavailableError' value='-17'/>
<enum name='kCFURLRemoteHostUnavailableError' value='-14'/>
<enum name='kCFURLResourceAccessViolationError' value='-13'/>
<enum name='kCFURLResourceNotFoundError' value='-12'/>
<enum name='kCFURLTimeoutError' value='-18'/>
<enum name='kCFURLUnknownError' value='-10'/>
<enum name='kCFURLUnknownPropertyKeyError' value='-16'/>
<enum name='kCFURLUnknownSchemeError' value='-11'/>
<enum name='kCFURLWindowsPathStyle' value='2'/>
<enum name='kCFUserNotificationAlternateResponse' value='1'/>
<enum name='kCFUserNotificationCancelResponse' value='3'/>
<enum name='kCFUserNotificationCautionAlertLevel' value='2'/>
<enum name='kCFUserNotificationDefaultResponse' value='0'/>
<enum name='kCFUserNotificationNoDefaultButtonFlag' value='32'/>
<enum name='kCFUserNotificationNoteAlertLevel' value='1'/>
<enum name='kCFUserNotificationOtherResponse' value='2'/>
<enum name='kCFUserNotificationPlainAlertLevel' value='3'/>
<enum name='kCFUserNotificationStopAlertLevel' value='0'/>
<enum name='kCFUserNotificationUseRadioButtonsFlag' value='64'/>
<enum name='kCFXMLEntityTypeCharacter' value='4'/>
<enum name='kCFXMLEntityTypeParameter' value='0'/>
<enum name='kCFXMLEntityTypeParsedExternal' value='2'/>
<enum name='kCFXMLEntityTypeParsedInternal' value='1'/>
<enum name='kCFXMLEntityTypeUnparsed' value='3'/>
<enum name='kCFXMLErrorElementlessDocument' value='11'/>
<enum name='kCFXMLErrorEncodingConversionFailure' value='3'/>
<enum name='kCFXMLErrorMalformedCDSect' value='7'/>
<enum name='kCFXMLErrorMalformedCharacterReference' value='13'/>
<enum name='kCFXMLErrorMalformedCloseTag' value='8'/>
<enum name='kCFXMLErrorMalformedComment' value='12'/>
<enum name='kCFXMLErrorMalformedDTD' value='5'/>
<enum name='kCFXMLErrorMalformedDocument' value='10'/>
<enum name='kCFXMLErrorMalformedName' value='6'/>
<enum name='kCFXMLErrorMalformedParsedCharacterData' value='14'/>
<enum name='kCFXMLErrorMalformedProcessingInstruction' value='4'/>
<enum name='kCFXMLErrorMalformedStartTag' value='9'/>
<enum name='kCFXMLErrorNoData' value='15'/>
<enum name='kCFXMLErrorUnexpectedEOF' value='1'/>
<enum name='kCFXMLErrorUnknownEncoding' value='2'/>
<enum name='kCFXMLNodeCurrentVersion' value='1'/>
<enum name='kCFXMLNodeTypeAttribute' value='3'/>
<enum name='kCFXMLNodeTypeAttributeListDeclaration' value='15'/>
<enum name='kCFXMLNodeTypeCDATASection' value='7'/>
<enum name='kCFXMLNodeTypeComment' value='5'/>
<enum name='kCFXMLNodeTypeDocument' value='1'/>
<enum name='kCFXMLNodeTypeDocumentFragment' value='8'/>
<enum name='kCFXMLNodeTypeDocumentType' value='11'/>
<enum name='kCFXMLNodeTypeElement' value='2'/>
<enum name='kCFXMLNodeTypeElementTypeDeclaration' value='14'/>
<enum name='kCFXMLNodeTypeEntity' value='9'/>
<enum name='kCFXMLNodeTypeEntityReference' value='10'/>
<enum name='kCFXMLNodeTypeNotation' value='13'/>
<enum name='kCFXMLNodeTypeProcessingInstruction' value='4'/>
<enum name='kCFXMLNodeTypeText' value='6'/>
<enum name='kCFXMLNodeTypeWhitespace' value='12'/>
<enum name='kCFXMLParserAddImpliedAttributes' value='32'/>
<enum name='kCFXMLParserAllOptions' value='16777215'/>
<enum name='kCFXMLParserNoOptions' value='0'/>
<enum name='kCFXMLParserReplacePhysicalEntities' value='4'/>
<enum name='kCFXMLParserResolveExternalEntities' value='16'/>
<enum name='kCFXMLParserSkipMetaData' value='2'/>
<enum name='kCFXMLParserSkipWhitespace' value='8'/>
<enum name='kCFXMLParserValidateDocument' value='1'/>
<enum name='kCFXMLStatusParseInProgress' value='-1'/>
<enum name='kCFXMLStatusParseNotBegun' value='-2'/>
<enum name='kCFXMLStatusParseSuccessful' value='0'/>
<function name='CFAbsoluteTimeAddGregorianUnits'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='{_CFGregorianUnits=iiiiid}' declared_type='CFGregorianUnits' name='units'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetCurrent'>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetDayOfWeek'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFAbsoluteTimeGetDayOfYear'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFAbsoluteTimeGetDifferenceAsGregorianUnits'>
<arg type='d' declared_type='CFAbsoluteTime' name='at1'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at2'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='L' declared_type='CFOptionFlags' name='unitFlags' type64='Q'/>
<retval type='{_CFGregorianUnits=iiiiid}' declared_type='CFGregorianUnits'/>
</function>
<function name='CFAbsoluteTimeGetGregorianDate'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate'/>
</function>
<function name='CFAbsoluteTimeGetWeekOfYear'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFAllocatorAllocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='size' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='hint' type64='Q'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' declared_type='CFAllocatorContext*' name='context' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}'/>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef' already_retained='true'/>
</function>
<function name='CFAllocatorDeallocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^v' declared_type='void*' name='ptr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetContext'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' declared_type='CFAllocatorContext*' name='context' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetDefault'>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFAllocatorGetPreferredSizeForSize'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='size' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='hint' type64='Q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFAllocatorGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFAllocatorReallocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^v' declared_type='void*' name='ptr'/>
<arg type='l' declared_type='CFIndex' name='newsize' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='hint' type64='Q'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorSetDefault'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendArray'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='otherArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='otherRange' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendValue'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayApplyFunction'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^?' declared_type='CFArrayApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayBSearchValues'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<arg type='^?' declared_type='CFComparatorFunction' name='comparator' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFArrayContainsValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFArrayCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<arg type='l' declared_type='CFIndex' name='numValues' type64='q'/>
<arg type='^{_CFArrayCallBacks=i^?^?^?^?}' declared_type='CFArrayCallBacks*' name='callBacks' const='true' type64='^{_CFArrayCallBacks=q^?^?^?^?}'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFArrayCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFArrayCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{_CFArrayCallBacks=i^?^?^?^?}' declared_type='CFArrayCallBacks*' name='callBacks' const='true' type64='^{_CFArrayCallBacks=q^?^?^?^?}'/>
<retval type='^{__CFArray=}' declared_type='CFMutableArrayRef' already_retained='true'/>
</function>
<function name='CFArrayCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='^{__CFArray=}' declared_type='CFMutableArrayRef' already_retained='true'/>
</function>
<function name='CFArrayExchangeValuesAtIndices'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' declared_type='CFIndex' name='idx1' type64='q'/>
<arg type='l' declared_type='CFIndex' name='idx2' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayGetCount'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetCountOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetFirstIndexOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetLastIndexOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFArrayGetValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFArrayGetValues'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayInsertValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveAllValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayReplaceValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^^v' declared_type='void**' name='newValues' const='true'/>
<arg type='l' declared_type='CFIndex' name='newCount' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySetValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySortValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^?' declared_type='CFComparatorFunction' name='comparator' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringBeginEditing'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='attributes'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' already_retained='true'/>
</function>
<function name='CFAttributedStringCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' already_retained='true'/>
</function>
<function name='CFAttributedStringCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' declared_type='CFIndex' name='maxLength' type64='q'/>
<retval type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' already_retained='true'/>
</function>
<function name='CFAttributedStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' declared_type='CFIndex' name='maxLength' type64='q'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' already_retained='true'/>
</function>
<function name='CFAttributedStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' already_retained='true'/>
</function>
<function name='CFAttributedStringEndEditing'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringGetAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' declared_type='CFIndex' name='loc' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='effectiveRange' type64='^{_CFRange=qq}'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributeAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' declared_type='CFIndex' name='loc' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='inRange' type64='{_CFRange=qq}'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='longestEffectiveRange' type64='^{_CFRange=qq}'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributes'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' declared_type='CFIndex' name='loc' type64='q'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='effectiveRange' type64='^{_CFRange=qq}'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetAttributesAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' declared_type='CFIndex' name='loc' type64='q'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='inRange' type64='{_CFRange=qq}'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='longestEffectiveRange' type64='^{_CFRange=qq}'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetLength'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFAttributedStringGetMutableString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFAttributedStringGetString'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFAttributedStringGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFAttributedStringRemoveAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceAttributedString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttributes'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='replacement'/>
<arg type='B' declared_type='Boolean' name='clearOtherAttributes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagAddValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagApplyFunction'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^?' declared_type='CFBagApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagContainsValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<arg type='l' declared_type='CFIndex' name='numValues' type64='q'/>
<arg type='^{_CFBagCallBacks=i^?^?^?^?^?}' declared_type='CFBagCallBacks*' name='callBacks' const='true' type64='^{_CFBagCallBacks=q^?^?^?^?^?}'/>
<retval type='^{__CFBag=}' declared_type='CFBagRef' already_retained='true'/>
</function>
<function name='CFBagCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='^{__CFBag=}' declared_type='CFBagRef' already_retained='true'/>
</function>
<function name='CFBagCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{_CFBagCallBacks=i^?^?^?^?^?}' declared_type='CFBagCallBacks*' name='callBacks' const='true' type64='^{_CFBagCallBacks=q^?^?^?^?^?}'/>
<retval type='^{__CFBag=}' declared_type='CFMutableBagRef' already_retained='true'/>
</function>
<function name='CFBagCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='^{__CFBag=}' declared_type='CFMutableBagRef' already_retained='true'/>
</function>
<function name='CFBagGetCount'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBagGetCountOfValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBagGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFBagGetValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFBagGetValueIfPresent'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='candidate' const='true'/>
<arg type='^^v' declared_type='void**' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagGetValues'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveAllValues'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagReplaceValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagSetValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapAddValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapApplyFunction'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^?' declared_type='CFBinaryHeapApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapContainsValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{_CFBinaryHeapCallBacks=i^?^?^?^?}' declared_type='CFBinaryHeapCallBacks*' name='callBacks' const='true' type64='^{_CFBinaryHeapCallBacks=q^?^?^?^?}'/>
<arg type='^{_CFBinaryHeapCompareContext=i^v^?^?^?}' declared_type='CFBinaryHeapCompareContext*' name='compareContext' const='true' type64='^{_CFBinaryHeapCompareContext=q^v^?^?^?}'/>
<retval type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' already_retained='true'/>
</function>
<function name='CFBinaryHeapCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' already_retained='true'/>
</function>
<function name='CFBinaryHeapGetCount'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBinaryHeapGetCountOfValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBinaryHeapGetMinimum'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFBinaryHeapGetMinimumIfPresent'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^^v' declared_type='void**' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFBinaryHeapGetValues'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveAllValues'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveMinimumValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorContainsBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBitVectorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='numBits' type64='q'/>
<retval type='^{__CFBitVector=}' declared_type='CFBitVectorRef' already_retained='true'/>
</function>
<function name='CFBitVectorCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='^{__CFBitVector=}' declared_type='CFBitVectorRef' already_retained='true'/>
</function>
<function name='CFBitVectorCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<retval type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' already_retained='true'/>
</function>
<function name='CFBitVectorCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' already_retained='true'/>
</function>
<function name='CFBitVectorFlipBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorFlipBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='L' declared_type='CFBit' type64='I'/>
</function>
<function name='CFBitVectorGetBits'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='*' declared_type='UInt8*' name='bytes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetCount'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetCountOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetFirstIndexOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetLastIndexOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFBitVectorSetAllBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFBit' name='value' type64='I'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetCount'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' declared_type='CFIndex' name='count' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBooleanGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFBooleanGetValue'>
<arg type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='boolean'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleCloseBundleResourceMap'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='s' declared_type='CFBundleRefNum' name='refNum' type64='i'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleCopyAuxiliaryExecutableURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='executableName'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyBuiltInPlugInsURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyBundleLocalizations'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyBundleURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyExecutableArchitectures'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyExecutableArchitecturesForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyExecutableURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyInfoDictionaryForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFBundleCopyInfoDictionaryInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFBundleCopyLocalizationsForPreferences'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='locArray'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='prefArray'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyLocalizationsForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyLocalizedString'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='tableName'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFBundleCopyPreferredLocalizationsFromArray'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='locArray'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyPrivateFrameworksURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURLForLocalization'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localizationName'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURLInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURLsOfType'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeForLocalization'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localizationName'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleCopyResourcesDirectoryURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopySharedFrameworksURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopySharedSupportURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCopySupportFilesDirectoryURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFBundleCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef' already_retained='true'/>
</function>
<function name='CFBundleCreateBundlesFromDirectory'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='directoryURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='bundleType'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFBundleGetAllBundles'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleGetBundleWithIdentifier'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='bundleID'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetDataPointerForName'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='symbolName'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetDataPointersForNames'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='symbolNames'/>
<arg type='^^v' declared_type='void**' name='stbl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetDevelopmentRegion'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetFunctionPointerForName'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='functionName'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetFunctionPointersForNames'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='functionNames'/>
<arg type='^^v' declared_type='void**' name='ftbl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetIdentifier'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetInfoDictionary'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetLocalInfoDictionary'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetMainBundle'>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetPackageInfo'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^I' declared_type='UInt32*' name='packageType'/>
<arg type='^I' declared_type='UInt32*' name='packageCreator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetPackageInfoInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^I' declared_type='UInt32*' name='packageType'/>
<arg type='^I' declared_type='UInt32*' name='packageCreator'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleGetPlugIn'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFBundle=}' declared_type='CFPlugInRef'/>
</function>
<function name='CFBundleGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFBundleGetValueForInfoDictionaryKey'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFBundleGetVersionNumber'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='L' declared_type='UInt32' type64='I'/>
</function>
<function name='CFBundleIsExecutableLoaded'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutableAndReturnError'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleOpenBundleResourceFiles'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^s' declared_type='CFBundleRefNum*' name='refNum' type64='^i'/>
<arg type='^s' declared_type='CFBundleRefNum*' name='localizedRefNum' type64='^i'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFBundleOpenBundleResourceMap'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='s' declared_type='CFBundleRefNum' type64='i'/>
</function>
<function name='CFBundlePreflightExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleUnloadExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFByteOrderGetCurrent'>
<retval type='l' declared_type='CFByteOrder' type64='q'/>
</function>
<function name='CFCalendarAddComponents' variadic='true'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='at'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='*' declared_type='char*' name='componentDesc' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarComposeAbsoluteTime' variadic='true'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='at'/>
<arg type='*' declared_type='char*' name='componentDesc' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarCopyCurrent'>
<retval type='^{__CFCalendar=}' declared_type='CFCalendarRef' already_retained='true'/>
</function>
<function name='CFCalendarCopyLocale'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef' already_retained='true'/>
</function>
<function name='CFCalendarCopyTimeZone'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFCalendarCreateWithIdentifier'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='identifier'/>
<retval type='^{__CFCalendar=}' declared_type='CFCalendarRef' already_retained='true'/>
</function>
<function name='CFCalendarDecomposeAbsoluteTime' variadic='true'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='*' declared_type='char*' name='componentDesc' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetComponentDifference' variadic='true'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='d' declared_type='CFAbsoluteTime' name='startingAT'/>
<arg type='d' declared_type='CFAbsoluteTime' name='resultAT'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='*' declared_type='char*' name='componentDesc' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetFirstWeekday'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetIdentifier'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFCalendarGetMaximumRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' declared_type='CFCalendarUnit' name='unit' type64='Q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetMinimumRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' declared_type='CFCalendarUnit' name='unit' type64='Q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetOrdinalityOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' declared_type='CFCalendarUnit' name='smallerUnit' type64='Q'/>
<arg type='L' declared_type='CFCalendarUnit' name='biggerUnit' type64='Q'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' declared_type='CFCalendarUnit' name='smallerUnit' type64='Q'/>
<arg type='L' declared_type='CFCalendarUnit' name='biggerUnit' type64='Q'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetTimeRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' declared_type='CFCalendarUnit' name='unit' type64='Q'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='startp'/>
<arg type='^d' declared_type='CFTimeInterval*' name='tip'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFCalendarSetFirstWeekday'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='l' declared_type='CFIndex' name='wkdy' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetLocale'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='l' declared_type='CFIndex' name='mwd' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetTimeZone'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInRange'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInString'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetCreateBitmapRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateInvertedSet'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateWithBitmapRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInRange'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' already_retained='true'/>
</function>
<function name='CFCharacterSetGetPredefined'>
<arg type='l' declared_type='CFCharacterSetPredefinedSet' name='theSetIdentifier' type64='q'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFCharacterSetHasMemberInPlane'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='l' declared_type='CFIndex' name='thePlane' type64='q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIntersect'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetInvert'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetIsCharacterMember'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='S' declared_type='UniChar' name='theChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsLongCharacterMember'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='L' declared_type='UTF32Char' name='theChar' type64='I'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsSupersetOfSet'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherset'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetRemoveCharactersInRange'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetRemoveCharactersInString'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetUnion'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherSet'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFConvertDoubleHostToSwapped'>
<arg type='d' declared_type='double' name='arg'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function inline='true' name='CFConvertDoubleSwappedToHost'>
<arg type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64' name='arg'/>
<retval type='d' declared_type='double'/>
</function>
<function inline='true' name='CFConvertFloat32HostToSwapped'>
<arg type='f' declared_type='Float32' name='arg'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function inline='true' name='CFConvertFloat32SwappedToHost'>
<arg type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32' name='arg'/>
<retval type='f' declared_type='Float32'/>
</function>
<function inline='true' name='CFConvertFloat64HostToSwapped'>
<arg type='d' declared_type='Float64' name='arg'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function inline='true' name='CFConvertFloat64SwappedToHost'>
<arg type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64' name='arg'/>
<retval type='d' declared_type='Float64'/>
</function>
<function inline='true' name='CFConvertFloatHostToSwapped'>
<arg type='f' declared_type='float' name='arg'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function inline='true' name='CFConvertFloatSwappedToHost'>
<arg type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32' name='arg'/>
<retval type='f' declared_type='float'/>
</function>
<function name='CFCopyDescription'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFCopyTypeIDDescription'>
<arg type='L' declared_type='CFTypeID' name='type_id' type64='Q'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFDataAppendBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFDataCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFDataCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<retval type='^{__CFData=}' declared_type='CFMutableDataRef' already_retained='true'/>
</function>
<function name='CFDataCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFData=}' declared_type='CFMutableDataRef' already_retained='true'/>
</function>
<function name='CFDataCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bytesDeallocator'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFDataDeleteBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataFind'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='dataToFind'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='searchRange' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFDataSearchFlags' name='compareOptions' type64='Q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFDataGetBytePtr'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='*' declared_type='UInt8*' const='true'/>
</function>
<function name='CFDataGetBytes'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataGetLength'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFDataGetMutableBytePtr'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<retval type='*' declared_type='UInt8*'/>
</function>
<function name='CFDataGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFDataIncreaseLength'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='l' declared_type='CFIndex' name='extraLength' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataReplaceBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='*' declared_type='UInt8*' name='newBytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='newLength' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataSetLength'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateCompare'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='otherDate'/>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</function>
<function name='CFDateCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFDate=}' declared_type='CFDateRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCopyProperty'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='l' declared_type='CFDateFormatterStyle' name='dateStyle' type64='q'/>
<arg type='l' declared_type='CFDateFormatterStyle' name='timeStyle' type64='q'/>
<retval type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCreateDateFormatFromTemplate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='tmplate'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCreateDateFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<retval type='^{__CFDate=}' declared_type='CFDateRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCreateStringWithAbsoluteTime'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFDateFormatterCreateStringWithDate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='date'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFDateFormatterGetAbsoluteTimeFromString'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='atp'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDateFormatterGetDateStyle'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='l' declared_type='CFDateFormatterStyle' type64='q'/>
</function>
<function name='CFDateFormatterGetFormat'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterGetLocale'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFDateFormatterGetTimeStyle'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='l' declared_type='CFDateFormatterStyle' type64='q'/>
</function>
<function name='CFDateFormatterGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFDateFormatterSetFormat'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='formatString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateFormatterSetProperty'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateGetAbsoluteTime'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFDateGetTimeIntervalSinceDate'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='otherDate'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFDateGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFDictionaryAddValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryApplyFunction'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^?' declared_type='CFDictionaryApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryContainsKey'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryContainsValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^^v' declared_type='void**' name='keys' const='true'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<arg type='l' declared_type='CFIndex' name='numValues' type64='q'/>
<arg type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks*' name='keyCallBacks' const='true' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<arg type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' declared_type='CFDictionaryValueCallBacks*' name='valueCallBacks' const='true' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFDictionaryCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFDictionaryCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks*' name='keyCallBacks' const='true' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<arg type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' declared_type='CFDictionaryValueCallBacks*' name='valueCallBacks' const='true' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<retval type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' already_retained='true'/>
</function>
<function name='CFDictionaryCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' already_retained='true'/>
</function>
<function name='CFDictionaryGetCount'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetCountOfKey'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetCountOfValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetKeysAndValues'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^^v' declared_type='void**' name='keys' const='true'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFDictionaryGetValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFDictionaryGetValueIfPresent'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<arg type='^^v' declared_type='void**' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryRemoveAllValues'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryRemoveValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryReplaceValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionarySetValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg type='^v' declared_type='void*' name='key' const='true'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFEqual'>
<arg type='@' declared_type='CFTypeRef' name='cf1'/>
<arg type='@' declared_type='CFTypeRef' name='cf2'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFErrorCopyDescription'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFErrorCopyFailureReason'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFErrorCopyRecoverySuggestion'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFErrorCopyUserInfo'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFErrorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='domain'/>
<arg type='l' declared_type='CFIndex' name='code' type64='q'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef' already_retained='true'/>
</function>
<function name='CFErrorCreateWithUserInfoKeysAndValues'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='domain'/>
<arg type='l' declared_type='CFIndex' name='code' type64='q'/>
<arg type='^^v' declared_type='void **' name='userInfoKeys' const='true'/>
<arg type='^^v' declared_type='void **' name='userInfoValues' const='true'/>
<arg type='l' declared_type='CFIndex' name='numUserInfoValues' type64='q'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef' already_retained='true'/>
</function>
<function name='CFErrorGetCode'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFErrorGetDomain'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFFileDescriptorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='i' declared_type='CFFileDescriptorNativeDescriptor' name='fd'/>
<arg type='B' declared_type='Boolean' name='closeOnInvalidate'/>
<arg type='^?' declared_type='CFFileDescriptorCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef'/>
<arg type='L' declared_type='CFOptionFlags' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFFileDescriptorContext=i^v^?^?^?}' declared_type='CFFileDescriptorContext*' name='context' const='true' type64='^{_CFFileDescriptorContext=q^v^?^?^?}'/>
<retval type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' already_retained='true'/>
</function>
<function name='CFFileDescriptorCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFFileDescriptorDisableCallBacks'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorEnableCallBacks'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetContext'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='^{_CFFileDescriptorContext=i^v^?^?^?}' declared_type='CFFileDescriptorContext*' name='context' type64='^{_CFFileDescriptorContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetNativeDescriptor'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='i' declared_type='CFFileDescriptorNativeDescriptor'/>
</function>
<function name='CFFileDescriptorGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFFileDescriptorInvalidate'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorIsValid'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityClearProperties'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='L' declared_type='CFOptionFlags' name='clearPropertyMask' type64='Q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyAccessControlList'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{_acl}' declared_type='acl_t*' name='accessControlList'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyGroupUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{__CFUUID}' declared_type='CFUUIDRef*' name='groupUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyOwnerUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{__CFUUID}' declared_type='CFUUIDRef*' name='ownerUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<retval type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' already_retained='true'/>
</function>
<function name='CFFileSecurityCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<retval type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' already_retained='true'/>
</function>
<function name='CFFileSecurityGetGroup'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^I' declared_type='gid_t*' name='group'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetMode'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^S' declared_type='mode_t*' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetOwner'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^I' declared_type='uid_t*' name='owner'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFFileSecuritySetAccessControlList'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{_acl=}' declared_type='acl_t' name='accessControlList'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroup'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='I' declared_type='gid_t' name='group'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroupUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='groupUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetMode'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='S' declared_type='mode_t' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwner'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='I' declared_type='uid_t' name='owner'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwnerUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='ownerUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFGetAllocator'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFGetRetainCount'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFGetTypeID'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFGregorianDateGetAbsoluteTime'>
<arg type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate' name='gdate'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFGregorianDateIsValid'>
<arg type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate' name='gdate'/>
<arg type='L' declared_type='CFOptionFlags' name='unitFlags' type64='Q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFHash'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='L' declared_type='CFHashCode' type64='Q'/>
</function>
<function name='CFLocaleCopyAvailableLocaleIdentifiers'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyCommonISOCurrencyCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyCurrent'>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyDisplayNameForPropertyValue'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='displayLocale'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='value'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyISOCountryCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyISOCurrencyCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyISOLanguageCodes'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCopyPreferredLanguages'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFLocaleCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateCanonicalLanguageIdentifierFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='s' declared_type='LangCode' name='lcode'/>
<arg type='s' declared_type='RegionCode' name='rcode'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateComponentsFromLocaleIdentifier'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeID'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromComponents'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='I' declared_type='uint32_t' name='lcid'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFLocaleGetIdentifier'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleGetLanguageCharacterDirection'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='isoLangCode'/>
<retval type='l' declared_type='CFLocaleLanguageDirection' type64='q'/>
</function>
<function name='CFLocaleGetLanguageLineDirection'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='isoLangCode'/>
<retval type='l' declared_type='CFLocaleLanguageDirection' type64='q'/>
</function>
<function name='CFLocaleGetSystem'>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFLocaleGetValue'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFMachPortCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^?' declared_type='CFMachPortCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' declared_type='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMachPort=}' declared_type='CFMachPortRef' already_retained='true'/>
</function>
<function name='CFMachPortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFMachPortCreateWithPort'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='I' declared_type='mach_port_t' name='portNum'/>
<arg type='^?' declared_type='CFMachPortCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' declared_type='CFIndex' type64='q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' declared_type='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMachPort=}' declared_type='CFMachPortRef' already_retained='true'/>
</function>
<function name='CFMachPortGetContext'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' declared_type='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortGetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='^?' declared_type='CFMachPortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMachPortGetPort'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='I' declared_type='mach_port_t'/>
</function>
<function name='CFMachPortGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFMachPortInvalidate'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortIsValid'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMachPortSetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg type='^?' declared_type='CFMachPortInvalidationCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMakeCollectable'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFMessagePortCreateLocal'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^?' declared_type='CFMessagePortCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='l' declared_type='SInt32' type64='i'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</arg>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' declared_type='CFMessagePortContext*' name='context' type64='^{_CFMessagePortContext=q^v^?^?^?}'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' already_retained='true'/>
</function>
<function name='CFMessagePortCreateRemote'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<retval type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' already_retained='true'/>
</function>
<function name='CFMessagePortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='local'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFMessagePortGetContext'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' declared_type='CFMessagePortContext*' name='context' type64='^{_CFMessagePortContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortGetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='^?' declared_type='CFMessagePortInvalidationCallBack' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMessagePortGetName'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFMessagePortGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFMessagePortInvalidate'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortIsRemote'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortIsValid'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortSendRequest'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='remote'/>
<arg type='l' declared_type='SInt32' name='msgid' type64='i'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='d' declared_type='CFTimeInterval' name='sendTimeout'/>
<arg type='d' declared_type='CFTimeInterval' name='rcvTimeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replyMode'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='returnData'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFMessagePortSetDispatchQueue'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='@' declared_type='dispatch_queue_t' name='queue'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='^?' declared_type='CFMessagePortInvalidationCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetName'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='newName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNotificationCenterAddObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^v' declared_type='void*' name='observer' const='true'/>
<arg type='^?' declared_type='CFNotificationCallback' name='callBack' function_pointer='true'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^v' declared_type='void*' name='object' const='true'/>
<arg type='l' declared_type='CFNotificationSuspensionBehavior' name='suspensionBehavior' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterGetDarwinNotifyCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetDistributedCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetLocalCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFNotificationCenterPostNotification'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^v' declared_type='void*' name='object' const='true'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<arg type='B' declared_type='Boolean' name='deliverImmediately'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterPostNotificationWithOptions'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^v' declared_type='void*' name='object' const='true'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveEveryObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^v' declared_type='void*' name='observer' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^v' declared_type='void*' name='observer' const='true'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^v' declared_type='void*' name='object' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNullGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberCompare'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='otherNumber'/>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</function>
<function name='CFNumberCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFNumberType' name='theType' type64='q'/>
<arg type='^v' declared_type='void*' name='valuePtr' const='true'/>
<retval type='^{__CFNumber=}' declared_type='CFNumberRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterCopyProperty'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='l' declared_type='CFNumberFormatterStyle' name='style' type64='q'/>
<retval type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterCreateNumberFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<retval type='^{__CFNumber=}' declared_type='CFNumberRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterCreateStringWithNumber'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterCreateStringWithValue'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='l' declared_type='CFNumberType' name='numberType' type64='q'/>
<arg type='^v' declared_type='void*' name='valuePtr' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFNumberFormatterGetDecimalInfoForCurrencyCode'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='currencyCode'/>
<arg type='^i' declared_type='int32_t*' name='defaultFractionDigits'/>
<arg type='^d' declared_type='double*' name='roundingIncrement'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterGetFormat'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterGetLocale'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFNumberFormatterGetStyle'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='l' declared_type='CFNumberFormatterStyle' type64='q'/>
</function>
<function name='CFNumberFormatterGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberFormatterGetValueFromString'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg type='l' declared_type='CFNumberType' name='numberType' type64='q'/>
<arg type='^v' declared_type='void*' name='valuePtr'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterSetFormat'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='formatString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberFormatterSetProperty'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberGetByteSize'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFNumberGetType'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='l' declared_type='CFNumberType' type64='q'/>
</function>
<function name='CFNumberGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberGetValue'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<arg type='l' declared_type='CFNumberType' name='theType' type64='q'/>
<arg type='^v' declared_type='void*' name='valuePtr'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberIsFloatType'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInAddInstanceForFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='plugInURL'/>
<retval type='^{__CFBundle=}' declared_type='CFPlugInRef' already_retained='true'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInTypeInPlugIn'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInGetBundle'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFPlugInGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFPlugInInstanceCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceCreateWithInstanceDataSize'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='instanceDataSize' type64='q'/>
<arg type='^?' declared_type='CFPlugInInstanceDeallocateInstanceDataFunction' name='deallocateInstanceFunction' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='factoryName'/>
<arg type='^?' declared_type='CFPlugInInstanceGetInterfaceFunction' name='getInterfaceFunction' function_pointer='true'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg type='^^v' declared_type='void**'/>
<retval type='B' declared_type='Boolean'/>
</arg>
<retval type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' already_retained='true'/>
</function>
<function name='CFPlugInInstanceGetFactoryName'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFPlugInInstanceGetInstanceData'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceGetInterfaceFunctionTable'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='interfaceName'/>
<arg type='^^v' declared_type='void**' name='ftbl'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInInstanceGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFPlugInIsLoadOnDemand'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunction'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^?' declared_type='CFPlugInFactoryFunction' name='func' function_pointer='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
<retval type='^v' declared_type='void*'/>
</arg>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunctionByName'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='functionName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRemoveInstanceForFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInSetLoadOnDemand'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<arg type='B' declared_type='Boolean' name='flag'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInUnregisterFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInUnregisterPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAddSuitePreferencesToApp'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suiteID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesAppSynchronize'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAppValueIsForced'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesCopyAppValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPreferencesCopyApplicationList'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFPreferencesCopyKeyList'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFPreferencesCopyMultiple'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keysToFetch'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFPreferencesCopyValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPreferencesGetAppBooleanValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^B' declared_type='Boolean*' name='keyExistsAndHasValidFormat'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesGetAppIntegerValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^B' declared_type='Boolean*' name='keyExistsAndHasValidFormat'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFPreferencesRemoveSuitePreferencesFromApp'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suiteID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetAppValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetMultiple'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='keysToSet'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keysToRemove'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSynchronize'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListCreateData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='l' declared_type='CFPropertyListFormat' name='format' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateDeepCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='L' declared_type='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateFromStream'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' declared_type='CFIndex' name='streamLength' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<arg type='^i' declared_type='CFPropertyListFormat*' name='format' type64='^q'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateFromXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='L' declared_type='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateWithData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^i' declared_type='CFPropertyListFormat*' name='format' type64='^q'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateWithStream'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' declared_type='CFIndex' name='streamLength' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^i' declared_type='CFPropertyListFormat*' name='format' type64='^q'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='@' declared_type='CFPropertyListRef' already_retained='true'/>
</function>
<function name='CFPropertyListCreateXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFPropertyListIsValid'>
<arg type='@' declared_type='CFPropertyListRef' name='plist'/>
<arg type='l' declared_type='CFPropertyListFormat' name='format' type64='q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListWrite'>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='l' declared_type='CFPropertyListFormat' name='format' type64='q'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFPropertyListWriteToStream'>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='l' declared_type='CFPropertyListFormat' name='format' type64='q'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function inline='true' name='CFRangeMake'>
<arg type='l' declared_type='CFIndex' name='loc' type64='q'/>
<arg type='l' declared_type='CFIndex' name='len' type64='q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFReadStreamClose'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamCopyError'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef' already_retained='true'/>
</function>
<function name='CFReadStreamCopyProperty'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFReadStreamCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bytesDeallocator'/>
<retval type='^{__CFReadStream=}' declared_type='CFReadStreamRef' already_retained='true'/>
</function>
<function name='CFReadStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<retval type='^{__CFReadStream=}' declared_type='CFReadStreamRef' already_retained='true'/>
</function>
<function name='CFReadStreamGetBuffer'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' declared_type='CFIndex' name='maxBytesToRead' type64='q'/>
<arg type='^i' declared_type='CFIndex*' name='numBytesRead' type64='^q'/>
<retval type='*' declared_type='UInt8*' const='true'/>
</function>
<function name='CFReadStreamGetError'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='{_CFStreamError=ii}' declared_type='CFStreamError' type64='{_CFStreamError=qi}'/>
</function>
<function name='CFReadStreamGetStatus'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='l' declared_type='CFStreamStatus' type64='q'/>
</function>
<function name='CFReadStreamGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFReadStreamHasBytesAvailable'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamOpen'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamRead'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='bufferLength' type64='q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFReadStreamScheduleWithRunLoop'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamSetClient'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='L' declared_type='CFOptionFlags' name='streamEvents' type64='Q'/>
<arg type='^?' declared_type='CFReadStreamClientCallBack' name='clientCB' function_pointer='true'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef'/>
<arg type='L' declared_type='CFStreamEventType' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' declared_type='CFStreamClientContext*' name='clientContext' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamSetProperty'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamUnscheduleFromRunLoop'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRelease'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRetain'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFRunLoopAddCommonMode'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopContainsObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopCopyAllModes'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFRunLoopCopyCurrentMode'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFRunLoopGetCurrent'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetMain'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetNextTimerFireDate'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopIsWaiting'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='L' declared_type='CFOptionFlags' name='activities' type64='Q'/>
<arg type='B' declared_type='Boolean' name='repeats'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<arg type='^?' declared_type='CFRunLoopObserverCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' declared_type='CFRunLoopActivity' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' declared_type='CFRunLoopObserverContext*' name='context' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}'/>
<retval type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' already_retained='true'/>
</function>
<function name='CFRunLoopObserverCreateWithHandler'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='L' declared_type='CFOptionFlags' name='activities' type64='Q'/>
<arg type='B' declared_type='Boolean' name='repeats'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<arg type='@?' declared_type='void (^)(CFRunLoopObserverRef, CFRunLoopActivity)' name='block' function_pointer='true'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' declared_type='CFRunLoopActivity' type64='Q'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' already_retained='true'/>
</function>
<function name='CFRunLoopObserverDoesRepeat'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverGetActivities'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='L' declared_type='CFOptionFlags' type64='Q'/>
</function>
<function name='CFRunLoopObserverGetContext'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' declared_type='CFRunLoopObserverContext*' name='context' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverGetOrder'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopObserverGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopObserverInvalidate'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverIsValid'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopPerformBlock'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='@' declared_type='CFTypeRef' name='mode'/>
<arg type='@?' declared_type='void (^)(void)' name='block' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRun'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRunInMode'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<arg type='d' declared_type='CFTimeInterval' name='seconds'/>
<arg type='B' declared_type='Boolean' name='returnAfterSourceHandled'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFRunLoopSourceCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' declared_type='CFRunLoopSourceContext*' name='context' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFRunLoopSourceGetContext'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' declared_type='CFRunLoopSourceContext*' name='context' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceGetOrder'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopSourceGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopSourceInvalidate'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceIsValid'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopSourceSignal'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopStop'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<arg type='d' declared_type='CFTimeInterval' name='interval'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<arg type='^?' declared_type='CFRunLoopTimerCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' declared_type='CFRunLoopTimerContext*' name='context' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}'/>
<retval type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' already_retained='true'/>
</function>
<function name='CFRunLoopTimerCreateWithHandler'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<arg type='d' declared_type='CFTimeInterval' name='interval'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<arg type='@?' declared_type='void (^)(CFRunLoopTimerRef)' name='block' function_pointer='true'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' already_retained='true'/>
</function>
<function name='CFRunLoopTimerDoesRepeat'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerGetContext'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' declared_type='CFRunLoopTimerContext*' name='context' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerGetInterval'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFRunLoopTimerGetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopTimerGetOrder'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopTimerGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopTimerInvalidate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerIsValid'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerSetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopWakeUp'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetAddValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetApplyFunction'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^?' declared_type='CFSetApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetContainsValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<arg type='l' declared_type='CFIndex' name='numValues' type64='q'/>
<arg type='^{_CFSetCallBacks=i^?^?^?^?^?}' declared_type='CFSetCallBacks*' name='callBacks' const='true' type64='^{_CFSetCallBacks=q^?^?^?^?^?}'/>
<retval type='^{__CFSet=}' declared_type='CFSetRef' already_retained='true'/>
</function>
<function name='CFSetCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='^{__CFSet=}' declared_type='CFSetRef' already_retained='true'/>
</function>
<function name='CFSetCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{_CFSetCallBacks=i^?^?^?^?^?}' declared_type='CFSetCallBacks*' name='callBacks' const='true' type64='^{_CFSetCallBacks=q^?^?^?^?^?}'/>
<retval type='^{__CFSet=}' declared_type='CFMutableSetRef' already_retained='true'/>
</function>
<function name='CFSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='^{__CFSet=}' declared_type='CFMutableSetRef' already_retained='true'/>
</function>
<function name='CFSetGetCount'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFSetGetCountOfValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFSetGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFSetGetValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFSetGetValueIfPresent'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='candidate' const='true'/>
<arg type='^^v' declared_type='void**' name='value' const='true'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetGetValues'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg type='^^v' declared_type='void**' name='values' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveAllValues'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetReplaceValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetSetValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg type='^v' declared_type='void*' name='value' const='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShow'>
<arg type='@' declared_type='CFTypeRef' name='obj'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShowStr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketConnectToAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCopyAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFSocketCopyPeerAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFSocketCopyRegisteredSocketSignature'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature' const='true'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='nameServerAddress'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCopyRegisteredValue'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature' const='true'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^^v' declared_type='CFPropertyListRef*' name='value'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='nameServerAddress'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' declared_type='SInt32' name='protocolFamily' type64='i'/>
<arg type='l' declared_type='SInt32' name='socketType' type64='i'/>
<arg type='l' declared_type='SInt32' name='protocol' type64='i'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg type='^?' declared_type='CFSocketCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType' type64='Q'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' declared_type='CFSocketContext*' name='context' const='true' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef' already_retained='true'/>
</function>
<function name='CFSocketCreateConnectedToSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature' const='true'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg type='^?' declared_type='CFSocketCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType' type64='Q'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' declared_type='CFSocketContext*' name='context' const='true' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef' already_retained='true'/>
</function>
<function name='CFSocketCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFSocketCreateWithNative'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='i' declared_type='CFSocketNativeHandle' name='sock'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg type='^?' declared_type='CFSocketCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType' type64='Q'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' declared_type='CFSocketContext*' name='context' const='true' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef' already_retained='true'/>
</function>
<function name='CFSocketCreateWithSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature' const='true'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg type='^?' declared_type='CFSocketCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' declared_type='CFSocketCallBackType' type64='Q'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFSocketContext=i^v^?^?^?}' declared_type='CFSocketContext*' name='context' const='true' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval type='^{__CFSocket=}' declared_type='CFSocketRef' already_retained='true'/>
</function>
<function name='CFSocketDisableCallBacks'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketEnableCallBacks'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' declared_type='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetContext'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{_CFSocketContext=i^v^?^?^?}' declared_type='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetDefaultNameRegistryPortNumber'>
<retval type='S' declared_type='UInt16'/>
</function>
<function name='CFSocketGetNative'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='i' declared_type='CFSocketNativeHandle'/>
</function>
<function name='CFSocketGetSocketFlags'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='L' declared_type='CFOptionFlags' type64='Q'/>
</function>
<function name='CFSocketGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFSocketInvalidate'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketIsValid'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSocketRegisterSocketSignature'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature' const='true'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature' const='true'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketRegisterValue'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature' const='true'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSendData'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSetAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSetDefaultNameRegistryPortNumber'>
<arg type='S' declared_type='UInt16' name='port'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketSetSocketFlags'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketUnregister'>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature' const='true'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<retval type='l' declared_type='CFSocketError' type64='q'/>
</function>
<function name='CFStreamCreateBoundPair'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<arg type='l' declared_type='CFIndex' name='transferBufferSize' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithPeerSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature' const='true'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocket'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='i' declared_type='CFSocketNativeHandle' name='sock'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocketToHost'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='host'/>
<arg type='L' declared_type='UInt32' name='port' type64='I'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppend'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='appendedString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCString'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='*' declared_type='char*' name='cStr' const='true'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCharacters'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^S' declared_type='UniChar*' name='chars' const='true'/>
<arg type='l' declared_type='CFIndex' name='numChars' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendFormat' variadic='true'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='format' printf_format='true'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendFormatAndArguments'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='format' printf_format='true'/>
<arg type='*' declared_type='va_list' name='arguments' declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendPascalString'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCapitalize'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCompare'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringCompareWithOptions'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToCompare' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringCompareWithOptionsAndLocale'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToCompare' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringConvertEncodingToIANACharSetName'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringConvertEncodingToNSStringEncoding'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='L' declared_type='unsigned long' type64='Q'/>
</function>
<function name='CFStringConvertEncodingToWindowsCodepage'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='L' declared_type='UInt32' type64='I'/>
</function>
<function name='CFStringConvertIANACharSetNameToEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringConvertNSStringEncodingToEncoding'>
<arg type='L' declared_type='unsigned long' name='encoding' type64='Q'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringConvertWindowsCodepageToEncoding'>
<arg type='L' declared_type='UInt32' name='codepage' type64='I'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringCreateArrayBySeparatingStrings'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='separatorString'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFStringCreateArrayWithFindResults'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFStringCreateByCombiningStrings'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='separatorString'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateExternalRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='C' declared_type='UInt8' name='lossByte'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFStringCreateFromExternalRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' declared_type='CFIndex' name='maxLength' type64='q'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' declared_type='CFIndex' name='maxLength' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateMutableWithExternalCharactersNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' declared_type='CFIndex' name='numChars' type64='q'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='externalCharactersAllocator'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='numBytes' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='bytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='numBytes' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithCString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='char*' name='cStr' const='true'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithCStringNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='char*' name='cStr' const='true'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithCharacters'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^S' declared_type='UniChar*' name='chars' const='true'/>
<arg type='l' declared_type='CFIndex' name='numChars' type64='q'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithCharactersNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^S' declared_type='UniChar*' name='chars' const='true'/>
<arg type='l' declared_type='CFIndex' name='numChars' type64='q'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='char*' name='buffer' const='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithFormat' variadic='true'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='format' printf_format='true'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithFormatAndArguments'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='format' printf_format='true'/>
<arg type='*' declared_type='va_list' name='arguments' declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithPascalString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithPascalStringNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringDelete'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringFind'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringFindAndReplace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacementString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringFindCharacterFromSet'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptions'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptionsAndLocale'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFold'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='L' declared_type='CFOptionFlags' name='theFlags' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='theLocale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetBytes'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='C' declared_type='UInt8' name='lossByte'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='maxBufLen' type64='q'/>
<arg type='^i' declared_type='CFIndex*' name='usedBufLen' type64='^q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringGetCString'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='*' declared_type='char*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='bufferSize' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetCStringPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='*' declared_type='char*' const='true'/>
</function>
<function name='CFStringGetCharacterAtIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function inline='true' name='CFStringGetCharacterFromInlineBuffer'>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' declared_type='CFStringInlineBuffer*' name='buf' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=qq}qq}'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function name='CFStringGetCharacters'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^S' declared_type='UniChar*' name='buffer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetCharactersPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^S' declared_type='UniChar*' const='true'/>
</function>
<function name='CFStringGetDoubleValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='d' declared_type='double'/>
</function>
<function name='CFStringGetFastestEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetFileSystemRepresentation'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='*' declared_type='char*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='maxBufLen' type64='q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetHyphenationLocationBeforeIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='l' declared_type='CFIndex' name='location' type64='q'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='limitRange' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^I' declared_type='UTF32Char*' name='character'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringGetIntValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFStringGetLength'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringGetLineBounds'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^i' declared_type='CFIndex*' name='lineBeginIndex' type64='^q'/>
<arg type='^i' declared_type='CFIndex*' name='lineEndIndex' type64='^q'/>
<arg type='^i' declared_type='CFIndex*' name='contentsEndIndex' type64='^q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetListOfAvailableEncodings'>
<retval type='^I' declared_type='CFStringEncoding*' const='true'/>
</function>
<function inline='true' name='CFStringGetLongCharacterForSurrogatePair'>
<arg type='S' declared_type='UniChar' name='surrogateHigh'/>
<arg type='S' declared_type='UniChar' name='surrogateLow'/>
<retval type='L' declared_type='UTF32Char' type64='I'/>
</function>
<function name='CFStringGetMaximumSizeForEncoding'>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringGetMaximumSizeOfFileSystemRepresentation'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringGetMostCompatibleMacStringEncoding'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetNameOfEncoding'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringGetParagraphBounds'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^i' declared_type='CFIndex*' name='parBeginIndex' type64='^q'/>
<arg type='^i' declared_type='CFIndex*' name='parEndIndex' type64='^q'/>
<arg type='^i' declared_type='CFIndex*' name='contentsEndIndex' type64='^q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetPascalString'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='*' declared_type='StringPtr' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='bufferSize' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetPascalStringPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='*' declared_type='ConstStringPtr'/>
</function>
<function name='CFStringGetRangeOfComposedCharactersAtIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='l' declared_type='CFIndex' name='theIndex' type64='q'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringGetSmallestEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function inline='true' name='CFStringGetSurrogatePairForLongCharacter'>
<arg type='L' declared_type='UTF32Char' name='character' type64='I'/>
<arg type='^S' declared_type='UniChar*' name='surrogates'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetSystemEncoding'>
<retval type='L' declared_type='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFStringHasPrefix'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='prefix'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringHasSuffix'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suffix'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringInitInlineBuffer'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' declared_type='CFStringInlineBuffer*' name='buf' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=qq}qq}'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringInsert'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='str'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='insertedStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringIsEncodingAvailable'>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringIsHyphenationAvailableForLocale'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringIsSurrogateHighCharacter'>
<arg type='S' declared_type='UniChar' name='character'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringIsSurrogateLowCharacter'>
<arg type='S' declared_type='UniChar' name='character'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringLowercase'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringNormalize'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='l' declared_type='CFStringNormalizationForm' name='theForm' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringPad'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='padString'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='l' declared_type='CFIndex' name='indexIntoPad' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplaceAll'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringSetExternalCharactersNoCopy'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='l' declared_type='CFIndex' name='capacity' type64='q'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTokenizerAdvanceToNextToken'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<retval type='L' declared_type='CFStringTokenizerTokenType' type64='Q'/>
</function>
<function name='CFStringTokenizerCopyBestStringLanguage'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFStringTokenizerCopyCurrentTokenAttribute'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='L' declared_type='CFOptionFlags' name='attribute' type64='Q'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFStringTokenizerCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg type='L' declared_type='CFOptionFlags' name='options' type64='Q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' already_retained='true'/>
</function>
<function name='CFStringTokenizerGetCurrentSubTokens'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='ranges' type64='^{_CFRange=qq}'/>
<arg type='l' declared_type='CFIndex' name='maxRangeLength' type64='q'/>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='derivedSubTokens'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFStringTokenizerGetCurrentTokenRange'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringTokenizerGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFStringTokenizerGoToTokenAtIndex'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='l' declared_type='CFIndex' name='index' type64='q'/>
<retval type='L' declared_type='CFStringTokenizerTokenType' type64='Q'/>
</function>
<function name='CFStringTokenizerSetString'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' declared_type='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTransform'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='string'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='range' type64='^{_CFRange=qq}'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='transform'/>
<arg type='B' declared_type='Boolean' name='reverse'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringTrim'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='trimString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTrimWhitespace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringUppercase'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFSwapInt16'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16BigToHost'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16HostToBig'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16HostToLittle'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16LittleToHost'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt32'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32BigToHost'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32HostToBig'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32HostToLittle'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32LittleToHost'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt64'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64BigToHost'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64HostToBig'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64HostToLittle'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64LittleToHost'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFTimeZoneCopyAbbreviation'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCopyAbbreviationDictionary'>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCopyDefault'>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCopyKnownNames'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCopyLocalizedName'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='l' declared_type='CFTimeZoneNameStyle' name='style' type64='q'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCopySystem'>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCreateWithName'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='B' declared_type='Boolean' name='tryAbbrev'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFTimeZoneCreateWithTimeIntervalFromGMT'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFTimeInterval' name='ti'/>
<retval type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' already_retained='true'/>
</function>
<function name='CFTimeZoneGetData'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFTimeZoneGetDaylightSavingTimeOffset'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetName'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneGetNextDaylightSavingTimeTransition'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFTimeZoneGetSecondsFromGMT'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFTimeZoneIsDaylightSavingTime'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFTimeZoneResetSystem'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetAbbreviationDictionary'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dict'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetDefault'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeAppendChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newChild'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeApplyFunctionToChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^?' declared_type='CFTreeApplierFunction' name='applier' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' declared_type='CFTreeContext*' name='context' const='true' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef' already_retained='true'/>
</function>
<function name='CFTreeFindRoot'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildAtIndex'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildCount'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFTreeGetChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^^{__CFTree}' declared_type='CFTreeRef*' name='children'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetContext'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' declared_type='CFTreeContext*' name='context' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetFirstChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetNextSibling'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetParent'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFTreeInsertSibling'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newSibling'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreePrependChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newChild'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemove'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemoveAllChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSetContext'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' declared_type='CFTreeContext*' name='context' const='true' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSortChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^?' declared_type='CFComparatorFunction' name='comparator' function_pointer='true'>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*' const='true'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' declared_type='CFComparisonResult' type64='q'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCanBeDecomposed'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLClearResourcePropertyCache'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLClearResourcePropertyCacheForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCopyAbsoluteURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCopyFileSystemPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='l' declared_type='CFURLPathStyle' name='pathStyle' type64='q'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyFragment'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyHostName'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyLastPathComponent'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyNetLocation'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyParameterString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyPassword'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyPathExtension'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyQueryString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keys'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFURLCopyResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^v' declared_type='void*' name='propertyValueTypeRefPtr'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCopyResourceSpecifier'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyScheme'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyStrictPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^B' declared_type='Boolean*' name='isAbsolute'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCopyUserName'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCreateAbsoluteURLWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='relativeURLBytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<arg type='B' declared_type='Boolean' name='useCompatibilityMode'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='L' declared_type='CFURLBookmarkCreationOptions' name='options' type64='Q'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToInclude'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeToURL'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFURLCreateBookmarkDataFromAliasRecord'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocatorRef'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='aliasRecordDataRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFURLCreateBookmarkDataFromFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='errorRef'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFURLCreateByResolvingBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<arg type='L' declared_type='CFURLBookmarkResolutionOptions' name='options' type64='Q'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeToURL'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToInclude'/>
<arg type='^B' declared_type='Boolean*' name='isStale'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateCopyAppendingPathComponent'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='pathComponent'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateCopyAppendingPathExtension'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='extension'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateCopyDeletingLastPathComponent'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateCopyDeletingPathExtension'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='B' declared_type='Boolean' name='escapeWhitespace'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFURLCreateDataAndPropertiesFromResource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='resourceData'/>
<arg type='^^{__CFDictionary}' declared_type='CFDictionaryRef*' name='properties'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='desiredProperties'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCreateFilePathURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateFileReferenceURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateFromFSRef'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{FSRef=[80C]}' declared_type='struct FSRef*' name='fsRef' const='true'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='buffer' const='true'/>
<arg type='l' declared_type='CFIndex' name='bufLen' type64='q'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentationRelativeToBase'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='buffer' const='true'/>
<arg type='l' declared_type='CFIndex' name='bufLen' type64='q'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreatePropertyFromResource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='property'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFURLCreateResourcePropertiesForKeysFromBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToReturn'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef' already_retained='true'/>
</function>
<function name='CFURLCreateResourcePropertyForKeyFromBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourcePropertyKey'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFURLCreateStringByAddingPercentEscapes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='originalString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveUnescaped'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='legalURLCharactersToBeEscaped'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='originalString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapesUsingEncoding'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='origString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charsToLeaveEscaped'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFURLCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='*' declared_type='UInt8*' name='URLBytes' const='true'/>
<arg type='l' declared_type='CFIndex' name='length' type64='q'/>
<arg type='L' declared_type='CFStringEncoding' name='encoding' type64='I'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateWithFileSystemPath'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='filePath'/>
<arg type='l' declared_type='CFURLPathStyle' name='pathStyle' type64='q'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateWithFileSystemPathRelativeToBase'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='filePath'/>
<arg type='l' declared_type='CFURLPathStyle' name='pathStyle' type64='q'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLCreateWithString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='URLString'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef' already_retained='true'/>
</function>
<function name='CFURLDestroyResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorCreateForDirectoryURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='directoryURL'/>
<arg type='L' declared_type='CFURLEnumeratorOptions' name='option' type64='Q'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='propertyKeys'/>
<retval type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' already_retained='true'/>
</function>
<function name='CFURLEnumeratorCreateForMountedVolumes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='L' declared_type='CFURLEnumeratorOptions' name='option' type64='Q'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='propertyKeys'/>
<retval type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' already_retained='true'/>
</function>
<function name='CFURLEnumeratorGetDescendentLevel'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFURLEnumeratorGetNextURL'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<arg type='^^{__CFURL}' declared_type='CFURLRef*' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='l' declared_type='CFURLEnumeratorResult' type64='q'/>
</function>
<function name='CFURLEnumeratorGetSourceDidChange'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFURLEnumeratorSkipDescendents'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLGetBaseURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLGetByteRangeForComponent'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='l' declared_type='CFURLComponentType' name='component' type64='q'/>
<arg type='^{_CFRange=ii}' declared_type='CFRange*' name='rangeIncludingSeparators' type64='^{_CFRange=qq}'/>
<retval type='{_CFRange=ii}' declared_type='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFURLGetBytes'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='bufferLength' type64='q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFURLGetFSRef'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{FSRef=[80C]}' declared_type='struct FSRef*' name='fsRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetFileSystemRepresentation'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='B' declared_type='Boolean' name='resolveAgainstBase'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='maxBufLen' type64='q'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetPortNumber'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFURLGetString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFURLHasDirectoryPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLResourceIsReachable'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='keyedPropertyValues'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetTemporaryResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLStartAccessingSecurityScopedResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLStopAccessingSecurityScopedResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLWriteBookmarkDataToFile'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmarkRef'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<arg type='L' declared_type='CFURLBookmarkFileCreationOptions' name='options' type64='Q'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='errorRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLWriteDataAndPropertiesToResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='dataToWrite'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='propertiesToWrite'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFUUIDCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef' already_retained='true'/>
</function>
<function name='CFUUIDCreateFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='uuidStr'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef' already_retained='true'/>
</function>
<function name='CFUUIDCreateFromUUIDBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' declared_type='CFUUIDBytes' name='bytes'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef' already_retained='true'/>
</function>
<function name='CFUUIDCreateString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='uuid'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFUUIDCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='C' declared_type='UInt8' name='byte0'/>
<arg type='C' declared_type='UInt8' name='byte1'/>
<arg type='C' declared_type='UInt8' name='byte2'/>
<arg type='C' declared_type='UInt8' name='byte3'/>
<arg type='C' declared_type='UInt8' name='byte4'/>
<arg type='C' declared_type='UInt8' name='byte5'/>
<arg type='C' declared_type='UInt8' name='byte6'/>
<arg type='C' declared_type='UInt8' name='byte7'/>
<arg type='C' declared_type='UInt8' name='byte8'/>
<arg type='C' declared_type='UInt8' name='byte9'/>
<arg type='C' declared_type='UInt8' name='byte10'/>
<arg type='C' declared_type='UInt8' name='byte11'/>
<arg type='C' declared_type='UInt8' name='byte12'/>
<arg type='C' declared_type='UInt8' name='byte13'/>
<arg type='C' declared_type='UInt8' name='byte14'/>
<arg type='C' declared_type='UInt8' name='byte15'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef' already_retained='true'/>
</function>
<function name='CFUUIDGetConstantUUIDWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='C' declared_type='UInt8' name='byte0'/>
<arg type='C' declared_type='UInt8' name='byte1'/>
<arg type='C' declared_type='UInt8' name='byte2'/>
<arg type='C' declared_type='UInt8' name='byte3'/>
<arg type='C' declared_type='UInt8' name='byte4'/>
<arg type='C' declared_type='UInt8' name='byte5'/>
<arg type='C' declared_type='UInt8' name='byte6'/>
<arg type='C' declared_type='UInt8' name='byte7'/>
<arg type='C' declared_type='UInt8' name='byte8'/>
<arg type='C' declared_type='UInt8' name='byte9'/>
<arg type='C' declared_type='UInt8' name='byte10'/>
<arg type='C' declared_type='UInt8' name='byte11'/>
<arg type='C' declared_type='UInt8' name='byte12'/>
<arg type='C' declared_type='UInt8' name='byte13'/>
<arg type='C' declared_type='UInt8' name='byte14'/>
<arg type='C' declared_type='UInt8' name='byte15'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFUUIDGetUUIDBytes'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='uuid'/>
<retval type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' declared_type='CFUUIDBytes'/>
</function>
<function name='CFUserNotificationCancel'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function inline='true' name='CFUserNotificationCheckBoxChecked'>
<arg type='l' declared_type='CFIndex' name='i' type64='q'/>
<retval type='L' declared_type='CFOptionFlags' type64='Q'/>
</function>
<function name='CFUserNotificationCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='^i' declared_type='SInt32*' name='error'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' already_retained='true'/>
</function>
<function name='CFUserNotificationCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='^?' declared_type='CFUserNotificationCallBack' name='callout' function_pointer='true'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef'/>
<arg type='L' declared_type='CFOptionFlags' type64='Q'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='l' declared_type='CFIndex' name='order' type64='q'/>
<retval type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' already_retained='true'/>
</function>
<function name='CFUserNotificationDisplayAlert'>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='iconURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='soundURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='localizationURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertHeader'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertMessage'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='defaultButtonTitle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alternateButtonTitle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='otherButtonTitle'/>
<arg type='^I' declared_type='CFOptionFlags*' name='responseFlags' type64='^Q'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFUserNotificationDisplayNotice'>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='iconURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='soundURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='localizationURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertHeader'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertMessage'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='defaultButtonTitle'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFUserNotificationGetResponseDictionary'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFUserNotificationGetResponseValue'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='l' declared_type='CFIndex' name='idx' type64='q'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFUserNotificationGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function inline='true' name='CFUserNotificationPopUpSelection'>
<arg type='l' declared_type='CFIndex' name='n' type64='q'/>
<retval type='L' declared_type='CFOptionFlags' type64='Q'/>
</function>
<function name='CFUserNotificationReceiveResponse'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^I' declared_type='CFOptionFlags*' name='responseFlags' type64='^Q'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function inline='true' name='CFUserNotificationSecureTextField'>
<arg type='l' declared_type='CFIndex' name='i' type64='q'/>
<retval type='L' declared_type='CFOptionFlags' type64='Q'/>
</function>
<function name='CFUserNotificationUpdate'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' declared_type='CFOptionFlags' name='flags' type64='Q'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='l' declared_type='SInt32' type64='i'/>
</function>
<function name='CFWriteStreamCanAcceptBytes'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamClose'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamCopyError'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='^{__CFError=}' declared_type='CFErrorRef' already_retained='true'/>
</function>
<function name='CFWriteStreamCopyProperty'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<retval type='@' declared_type='CFTypeRef' already_retained='true'/>
</function>
<function name='CFWriteStreamCreateWithAllocatedBuffers'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bufferAllocator'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' already_retained='true'/>
</function>
<function name='CFWriteStreamCreateWithBuffer'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' declared_type='CFIndex' name='bufferCapacity' type64='q'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' already_retained='true'/>
</function>
<function name='CFWriteStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<retval type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' already_retained='true'/>
</function>
<function name='CFWriteStreamGetError'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='{_CFStreamError=ii}' declared_type='CFStreamError' type64='{_CFStreamError=qi}'/>
</function>
<function name='CFWriteStreamGetStatus'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='l' declared_type='CFStreamStatus' type64='q'/>
</function>
<function name='CFWriteStreamGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFWriteStreamOpen'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamScheduleWithRunLoop'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamSetClient'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='L' declared_type='CFOptionFlags' name='streamEvents' type64='Q'/>
<arg type='^?' declared_type='CFWriteStreamClientCallBack' name='clientCB' function_pointer='true'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
<arg type='L' declared_type='CFStreamEventType' type64='Q'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' declared_type='CFStreamClientContext*' name='clientContext' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamSetProperty'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamUnscheduleFromRunLoop'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamWrite'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='*' declared_type='UInt8*' name='buffer' const='true'/>
<arg type='l' declared_type='CFIndex' name='bufferLength' type64='q'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFXMLCreateStringByEscapingEntities'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='entitiesDictionary'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFXMLCreateStringByUnescapingEntities'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='entitiesDictionary'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFXMLNodeCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' declared_type='CFXMLNodeTypeCode' name='xmlType' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='dataString'/>
<arg type='^v' declared_type='void*' name='additionalInfoPtr' const='true'/>
<arg type='l' declared_type='CFIndex' name='version' type64='q'/>
<retval type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' already_retained='true'/>
</function>
<function name='CFXMLNodeCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='origNode'/>
<retval type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' already_retained='true'/>
</function>
<function name='CFXMLNodeGetInfoPtr'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='^v' declared_type='void*' const='true'/>
</function>
<function name='CFXMLNodeGetString'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFXMLNodeGetTypeCode'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='l' declared_type='CFXMLNodeTypeCode' type64='q'/>
</function>
<function name='CFXMLNodeGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFXMLNodeGetVersion'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFXMLParserAbort'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='l' declared_type='CFXMLParserStatusCode' name='errorCode' type64='q'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='errorDescription'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserCopyErrorDescription'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^{__CFString=}' declared_type='CFStringRef' already_retained='true'/>
</function>
<function name='CFXMLParserCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' declared_type='CFOptionFlags' name='parseOptions' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='versionOfNodes' type64='q'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' declared_type='CFXMLParserContext*' name='context' type64='^{_CFXMLParserContext=q^v^?^?^?}'/>
<retval type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' already_retained='true'/>
</function>
<function name='CFXMLParserCreateWithDataFromURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' declared_type='CFOptionFlags' name='parseOptions' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='versionOfNodes' type64='q'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' declared_type='CFXMLParserContext*' name='context' type64='^{_CFXMLParserContext=q^v^?^?^?}'/>
<retval type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' already_retained='true'/>
</function>
<function name='CFXMLParserGetCallBacks'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserGetContext'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' declared_type='CFXMLParserContext*' name='context' type64='^{_CFXMLParserContext=q^v^?^?^?}'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserGetDocument'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFXMLParserGetLineNumber'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFXMLParserGetLocation'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' declared_type='CFIndex' type64='q'/>
</function>
<function name='CFXMLParserGetSourceURL'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFXMLParserGetStatusCode'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' declared_type='CFXMLParserStatusCode' type64='q'/>
</function>
<function name='CFXMLParserGetTypeID'>
<retval type='L' declared_type='CFTypeID' type64='Q'/>
</function>
<function name='CFXMLParserParse'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFXMLTreeCreateFromData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' declared_type='CFOptionFlags' name='parseOptions' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='versionOfNodes' type64='q'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateFromDataWithError'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' declared_type='CFOptionFlags' name='parseOptions' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='versionOfNodes' type64='q'/>
<arg type='^^{__CFDictionary}' declared_type='CFDictionaryRef*' name='errorDict'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateWithDataFromURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' declared_type='CFOptionFlags' name='parseOptions' type64='Q'/>
<arg type='l' declared_type='CFIndex' name='versionOfNodes' type64='q'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateWithNode'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFTree=}' declared_type='CFXMLTreeRef' name='xmlTree'/>
<retval type='^{__CFData=}' declared_type='CFDataRef' already_retained='true'/>
</function>
<function name='CFXMLTreeGetNode'>
<arg type='^{__CFTree=}' declared_type='CFXMLTreeRef' name='xmlTree'/>
<retval type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef'/>
</function>
</signatures>
