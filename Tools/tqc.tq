\ Tranquil compiler
import "stdlib"

error = { reason |
    "Error! #{reason}" print
    Exit(1)
}

inPath         = nil
outPath        = @"a.out"
runtimeLibPath = @"/usr/local/tranquil/lib/libtranquil.a"
ldFlags        = [@-fexceptions, @-all_load, @-framework, @AppKit, @-lobjc, @-lffi, runtimeLibPath, @"/usr/local/tranquil/gmp/lib/libgmp.a"]

args = ... objectEnumerator
while arg = args nextObject {
    if arg == @-o
        outPath = args nextObject
    else if inPath == nil
        inPath = arg
    else
        ldFlags << arg
}

`error("No input provided")` unless: inPath != nil

uuid = `NSProcessInfo processInfo globallyUniqueString`

irPath = "/tmp/#{uuid()}.bc"
status = NSTask launchedTaskWithLaunchPath: "/usr/local/tranquil/bin/tranquil"
                                 arguments: [@-aot, @-o, irPath, inPath];
                             waitUntilExit;
                         terminationStatus
`error("Compilation failed")` if: status != 0

asmPath = "/tmp/#{uuid()}.s"
status = NSTask launchedTaskWithLaunchPath: "/usr/local/tranquil/llvm/bin/llc"
                                 arguments: [@-O3, @-disable-fp-elim, @-relocation-model=pic, @-o, asmPath, irPath];
                             waitUntilExit;
                         terminationStatus
`error("Assembly failed")` if: status != 0

status = NSTask launchedTaskWithLaunchPath: "/usr/local/tranquil/llvm/bin/clang"
                                 arguments: ldFlags + [@-o, outPath, asmPath];
                             waitUntilExit;
                         terminationStatus
`error("Linking failed")` if: status != 0
