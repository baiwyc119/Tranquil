\ Tranquil compiler

error = { reason |
    "Error! «reason»" print
    ^^1
}
uuid = `NSProcessInfo processInfo globallyUniqueString`
llvm     = "/usr/local/tranquil/llvm"
tranquil = "/usr/local/tranquil/bin/tranquil"
xcode    = "/Applications/Xcode.app/Contents/Developer"
llc      = "«llvm»/bin/llc"
clang    = "«llvm»/bin/clang"
clang    = "«xcode»/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
ld       = "/usr/bin/ld"
arch     = "x86_64"
forIOS   = no

inPath   = nil
outPath  = #"a.out"
irPath   = "/tmp/«uuid()».bc"
asmPath  = "/tmp/«uuid()».s"
objPath  = "/tmp/«uuid()».o"
initPath = "/tmp/«uuid()».o"

tqFlags  = [#-aot, #-o, irPath]
llcFlags = [#-disable-fp-elim, #-relocation-model=pic, #-O3]
cflags   = [#-c, #"-I/usr/local/tranquil/include", #-O3]
ldFlags  = [#-demangle, #-dynamic, #-all_load,
            #-lm, #-ldl, #-ObjC, #-lSystem,
            #-framework, #Foundation, #-no_compact_unwind,
            #-force_load, #"/usr/local/tranquil/lib/libtranquil.a"]

args = ... objectEnumerator
while arg = args nextObject {
    if arg == #-o then
        outPath = args nextObject
    else if arg == #-d then
        tqFlags push: #"-d"
    else if arg == #-ios then
        forIOS = yes
    else if arg == #-arch then
        arch = args nextObject
    else if inPath == nil then
        inPath = arg
    else
        ldFlags push: arg
}
error("No input provided") unless inPath ~= nil
tqFlags push: inPath

if forIOS {
    ldFlags push: #"-lcrt1.3.1.o";
            push: #-syslibroot
\push: "«llvm»/lib/clang/3.2/lib/darwin/libclang_rt.ios.a";
    if arch == #i386 then {
        syslibroot = "«xcode»/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk"
        cflags  push: #"-miphoneos-version-min=6.0"
        ldFlags push: syslibroot;
                push: #-no_implicit_dylibs;
                push: #"-ios_simulator_version_min";
                push: #"6.0.0";
                push: #"-force_load";
                push: "«xcode»/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphonesimulator.a"
    } else {
        llcFlags push: #"-mtriple=thumbv7-apple-ios6.0.0"
        syslibroot = "«xcode»/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk"
        cflags  push: #"-miphoneos-version-min=6.0"
        ldFlags push: syslibroot;
                push: #"-ios_version_min";
                push: #"6.0.0";
                push: #"-force_load";
                push: "«xcode»/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_iphoneos.a"
    }
} else {
    syslibroot = "«xcode»/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk"
    llcFlags push: #-mattr=-avx \ Make sure the new AVX instructions aren't used
    ldFlags push: #"-macosx_version_min";
            push: #"10.7.0";
            push: "-L«syslibroot»/usr/lib";
            push: #"-lcrt1.10.6.o";
            push: "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc/libarclite_macosx.a"
}
cflags += [#-isysroot, syslibroot]
ldFlags += [#-syslibroot, syslibroot]

flags = [#-arch, arch] + tqFlags
status = (NSTask launchedTaskWithLaunchPath: tranquil arguments: flags) waitUntilExit; terminationStatus
error("Compilation failed") if status ~= 0

llcArchs = { #x86_64 => #x86-64, #i386 => #x86, #armv7 => #arm }
flags =  llcFlags + ["-march=«llcArchs[arch]»", #-o, asmPath, irPath]
status = (NSTask launchedTaskWithLaunchPath: llc arguments: flags) waitUntilExit; terminationStatus
error("Assembly failed") if status ~= 0

flags = cflags + [#-O3, #-g, #-arch, arch, #-o, initPath, #"/usr/local/tranquil/share/tqmain.m"]
status = (NSTask launchedTaskWithLaunchPath: clang arguments: flags) waitUntilExit; terminationStatus
error("Initializer compilation failed") if status ~= 0

flags = cflags + [#-arch, arch, #-o, objPath, asmPath]
status = (NSTask launchedTaskWithLaunchPath: clang arguments: flags) waitUntilExit; terminationStatus
error("Initializer assembly failed") if status ~= 0

flags = ldFlags + [#-arch, arch, #-o, outPath, objPath, initPath]
status = (NSTask launchedTaskWithLaunchPath: ld arguments: flags) waitUntilExit; terminationStatus
error("Linking failed") if status ~= 0

