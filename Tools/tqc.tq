\ Tranquil compiler
import "stdlib"

error = { reason |
    "Error! «reason»" print
    Exit(1)
}
clang = "/usr/local/tranquil/llvm/bin/clang"
arch   = "x86_64"
forIOS = no

inPath  = nil
outPath = @"a.out"
args    = ... objectEnumerator

ldFlags        = [@-fexceptions, @-all_load,
                  @-lm, @-ldl, @-lobjc,
                  @-framework, @Foundation,
                  @"/usr/local/tranquil/lib/libtranquil.a"]

while arg = args nextObject {
    if arg == @-o then
        outPath = args nextObject
    else if arg == @-ios then
        forIOS = yes
    else if arg == @-arch then
        arch = args nextObject
    else if inPath == nil then
        inPath = arg
    else
        ldFlags push: arg
}
error("No input provided") unless inPath ~= nil

if forIOS {
    clang = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
    "iOS build" print
    ldFlags push: @"-mios-simulator-version-min=5.0"
    ldFlags push: @-fobjc-link-runtime
    ldFlags push: @-Xlinker
    ldFlags push: @-no_implicit_dylibs
    ldFlags push: @-fobjc-abi-version=2
    ldFlags push: @-fobjc-legacy-dispatch
    ldFlags push: @"/usr/local/tranquil/libffi-ios/lib/libffi.a"
    ldFlags push: @-isysroot
    if arch == @i386 then
        sdkDir = @"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator6.0.sdk"
    else
        sdkDir = @"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.0.sdk"
    ldFlags push: sdkDir
} else {
    ldFlags push: @"-mmacosx-version-min=10.7"
    ldFlags push: @"/usr/lib/arc/libarclite_macosx.a"
    ldFlags push: @"/usr/local/tranquil/gmp/lib/libgmp.a"
    ldFlags push: @-lffi
}

ldFlags print
uuid = `NSProcessInfo processInfo globallyUniqueString`

irPath = "/tmp/«uuid()».bc"
status = NSTask launchedTaskWithLaunchPath: "/usr/local/tranquil/bin/tranquil"
                                 arguments: [@-aot, @-arch, arch, @-o, irPath, inPath];
                             waitUntilExit;
                         terminationStatus
error("Compilation failed") if status ~= 0

asmPath = "/tmp/«uuid()».s"
llcArchs = { @x86_64 => @x86-64, @i386 => @x86, @arm => @arm }
"arch: «arch» => «llcArchs[arch]»" print
status = NSTask launchedTaskWithLaunchPath: "/usr/local/tranquil/llvm/bin/llc"
                                 arguments: [@-O3, @-disable-fp-elim, "-march=«llcArchs[arch]»", @-relocation-model=pic, @-o, asmPath, irPath];
                             waitUntilExit;
                         terminationStatus
error("Assembly failed") if status ~= 0

status = NSTask launchedTaskWithLaunchPath: clang
                                 arguments: ldFlags + [@-arch, arch, @-o, outPath, asmPath];
                             waitUntilExit;
                         terminationStatus
error("Linking failed") if status ~= 0
