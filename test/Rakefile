CC  = 'clang'
CXX = 'clang++'
LD  = CC
LEX = 'lex'
YACC = 'bison --yacc'

BUILD_DIR = 'build'

LEX_OUTPATH  = "#{BUILD_DIR}/lex.yy.m"
YACC_OUTPATH = "#{BUILD_DIR}/y.tab.m"

LEXFLAGS = [
	'-f',
	"-o #{LEX_OUTPATH}"
#	'-d'
].join(' ')

YACCFLAGS = [
	'-t',
	'-d',
	'-v',
	"-o #{YACC_OUTPATH}",
	"--defines=#{BUILD_DIR}/y.tab.h"
].join(' ')

CFLAGS = [
	'-DDEBUG',
	'-std=gnu99',
	'-mmacosx-version-min=10.7',
	'-I`pwd`'
#	'--analyze'
].join(' ')

LIBS = ['-framework Foundation'].join(' ')

PATHMAP = "build/%n.o"

OBJC_SOURCES = FileList['*.m'].add('build/*.m')
O_FILES = OBJC_SOURCES.pathmap(PATHMAP)
LEX_SOURCE = FileList['*.l'].first
YACC_SOURCE = FileList['*.y'].first

def compile(file)
	  sh "#{CC} #{file[:in]} #{CFLAGS} -c -o #{file[:out]}"
end

rule '.o' => ['.m'] { |t| compile :in => t.source, :out => t.name }

OBJC_SOURCES.each { |src|
	file src.pathmap(PATHMAP) => src do |f|
		compile :in => f.prerequisites.first, :out => f.name
	end
}


#file LEX_OUTPATH.pathmap(PATHMAP)  =>  LEX_OUTPATH
#file YACC_OUTPATH.pathmap(PATHMAP) =>  YACC_OUTPATH

task :build_parser do |t|
	sh "#{LEX} #{LEXFLAGS} #{LEX_SOURCE}"
	sh "#{YACC} #{YACCFLAGS} #{YACC_SOURCE}"
end

file :tranquil => O_FILES do |t|
	sh "#{LD} #{LIBS} #{O_FILES} -o #{BUILD_DIR}/#{t.name}"
end

task :default => [:build_parser, :tranquil]

task :run => [:default] do 
	sh "#{BUILD_DIR}/tranquil"
end
