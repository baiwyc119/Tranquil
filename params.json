{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Tranquil","body":"# Tranquil\r\n\r\nTranquil is a programming language built on top of LLVM & the Objective-C Runtime.\r\n\r\nIt aims to provide a more expressive & easy to use way to write Mac (and soon, iOS) Apps.\r\n\r\nIt's features include:\r\n\r\n* Compatibility with C/ObjC headers, meaning that there is no need to create special bindings for C APIs.\r\n* Automatic memory management.\r\n* Dynamic Typing.\r\n* Language level concurrency support.\r\n* String interpolation.\r\n* Multiple assignment.\r\n* Message cascading.\r\n* Good performance, even at this extremely early stage.\r\n* And more..\r\n\r\nHowever, Tranquil is still extremely experimental and you shouldn't use it for anything other than fun for now. But to me at least, it is a lot of fun to play with.\r\n\r\n## How to build and run\r\n\r\nThe following will install Tranquil into /usr/local/tranquil (Along with a few dependencies).\r\n\r\n    > curl -fsSkL https://raw.github.com/fjolnir/Tranquil/master/Tools/install.sh | /bin/zsh\r\n    > /usr/local/tranquil/bin/tqrepl\r\n\r\n**Note:** OS X 10.8 is required. (10.7 & iOS â‰¥ 5 will be supported later)\r\n\r\n## Learning the language\r\n\r\nTo learn more about Tranquil you should read the [specification](https://github.com/fjolnir/Tranquil/blob/master/Docs/Tranquil%20Spec.md) and check out the [tests](https://github.com/fjolnir/Tranquil/blob/master/Tests).\r\n\r\nBut here're a couple of examples:\r\n\r\n### Array iteration\r\n\r\n```\r\nalternatives = [\"Objective-C\", \"Ruby\", \"Nu\", \"Perl\", \"Python\"]\r\nalternatives each: `alternative | \"Tranquil is nicer than #{alternative}\" print`\r\n\"Or so I hope at least.\" print\r\n```\r\n\r\n### Reduction\r\n\r\n```\r\nsum = (0 to: 1000000) reduce: `obj, accum=0 | obj+accum`\r\n```\r\n\r\n### Do two things at the same time\r\n\r\n```\r\na = async foo()\r\nb = bar()\r\nwhenFinished {\r\n    \"a is #{a} and b is: #{b}\" print\r\n}\r\n```\r\n\r\n### Message chaining (Without having to return self from every method you write)\r\n\r\n```\r\nvar = Character new; setName: \"Deckard\"; setOccupation: \"Blade Runner\"; self\r\n```\r\n\r\n### Multiple assignment\r\n\r\n```\r\na, b = b, a  \\ Swap b&a\r\n```\r\n\r\n### Calculate fibonacci numbers (In a not-so-performant manner)\r\n\r\n```\r\nfib = `n | n > 1 ? fib(n-1) + fib(n-2) ! n`\r\nfib(10) print\r\n```\r\n\r\n### Evaluate a regular expression\r\n\r\n```\r\nif /foo[a-z]+/i matches: \"Foobar\"\r\n    \"Foobar starts with foo.\" print\r\n```\r\n\r\n### Using the OpenGL & GLUT APIs\r\n\r\n```\r\nimport \"GLUT\" \\ This simply reads in your GLUT.h header. No bindings are required.\r\n\r\nGlutInit(0, nil)\r\nGlutInitDisplayMode(GLUT_DOUBLE)\r\nGlutInitWindowSize(640, 480)\r\nGlutInitWindowPosition(200, 200)\r\nGlutCreateWindow(\"Tranquil is cool as beans!\")\r\n\r\nGlClearColor(0, 0, 0, 0)\r\nGlScalef(0.4, 0.4, 0.4)\r\n\r\nGlutDisplayFunc({\r\n    GlRotatef(0.1, 0, 1, 0)\r\n    GlClear(GL_COLOR_BUFFER_BIT)\r\n    GlColor3f(0, 1, 0)\r\n        GlutWireDodecahedron()\r\n    GlColor3f(1, 1, 1)\r\n        GlutWireTeapot(0.7)\r\n    GlutSwapBuffers()\r\n})\r\n\r\nlastX, lastY = 0\r\nGlutMotionFunc({ x, y |\r\n    dx, dy = lastX - x, lastY - y\r\n    GlRotatef(dx, 0, 1, 0)\r\n    GlRotatef(dy, 1, 0, 0)\r\n    lastX, lastY = x, y\r\n})\r\n\r\nGlutIdleFunc(GlutPostRedisplay)\r\nGlutMainLoop()\r\n```\r\n\r\n### Talking to Cocoa\r\n\r\n```\r\nimport \"AppKit\"\r\n\r\nnsapp = NSApplication sharedApplication\r\n\r\n\\ Create the menubar\r\nquitMenuItem = NSMenuItem new; setTitle: \"Quit #{NSProcessInfo processInfo processName}\";\r\n                              setAction: $terminate:;\r\n                       setKeyEquivalent: $q;\r\n                                   self\r\nappMenu     = NSMenu new; addItem: quitMenuItem;   self\r\nappMenuItem = NSMenuItem new; setSubmenu: appMenu; self\r\nmenuBar     = NSMenu new; addItem: appMenuItem;    self\r\n\r\nnsapp setMainMenu: menuBar\r\n\r\n\\ Create a little view\r\n#TestView < NSView {\r\n    - init {\r\n        #gradient = NSGradient alloc initWithStartingColor: NSColor redColor\r\n                                               endingColor: NSColor yellowColor\r\n        ^self\r\n    }\r\n    - drawRect: dirtyRect {\r\n        #gradient drawInRect: dirtyRect angle: 45\r\n    }\r\n}\r\n\t\r\n\\ Create a window\r\nwin = NSWindow alloc initWithContentRect: [[0, 0], [300, 200]]\r\n                               styleMask: (NSTitledWindowMask bitOr: NSResizableWindowMask)\r\n                                 backing: NSBackingStoreBuffered\r\n                                   defer: no;\r\n                                setTitle: \"Tranquil!\";\r\n                          setContentView: TestView new;\r\n                                    self\r\n\r\n\\ Start the app\r\nwin makeKeyAndOrderFront: nil\r\nnsapp setActivationPolicy: NSApplicationActivationPolicyRegular\r\nnsapp activateIgnoringOtherApps: yes\r\nnsapp run\r\n```\r\n","tagline":"A programming language built on top of the Objective-C runtime and is ABI compatible with Objective-C.","google":""}